{"version":3,"file":"334.main.js","mappings":"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","sources":["webpack://flowgenius/./node_modules/data-uri-to-buffer/dist/index.js","webpack://flowgenius/./node_modules/gaxios/node_modules/node-fetch/src/errors/base.js","webpack://flowgenius/./node_modules/gaxios/node_modules/node-fetch/src/errors/fetch-error.js","webpack://flowgenius/./node_modules/gaxios/node_modules/node-fetch/src/utils/is.js","webpack://flowgenius/./node_modules/gaxios/node_modules/node-fetch/src/body.js","webpack://flowgenius/./node_modules/gaxios/node_modules/node-fetch/src/headers.js","webpack://flowgenius/./node_modules/gaxios/node_modules/node-fetch/src/utils/is-redirect.js","webpack://flowgenius/./node_modules/gaxios/node_modules/node-fetch/src/response.js","webpack://flowgenius/./node_modules/gaxios/node_modules/node-fetch/src/utils/referrer.js","webpack://flowgenius/./node_modules/gaxios/node_modules/node-fetch/src/request.js","webpack://flowgenius/./node_modules/gaxios/node_modules/node-fetch/src/utils/get-search.js","webpack://flowgenius/./node_modules/gaxios/node_modules/node-fetch/src/errors/abort-error.js","webpack://flowgenius/./node_modules/gaxios/node_modules/node-fetch/src/index.js","webpack://flowgenius/./node_modules/fetch-blob/from.js","webpack://flowgenius/./node_modules/web-streams-polyfill/dist/ponyfill.es2018.js","webpack://flowgenius/./node_modules/node-domexception/index.js","webpack://flowgenius/./node_modules/fetch-blob/file.js","webpack://flowgenius/./node_modules/fetch-blob/index.js","webpack://flowgenius/./node_modules/fetch-blob/streams.cjs","webpack://flowgenius/./node_modules/formdata-polyfill/esm.min.js"],"sourcesContent":["/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */\nexport function dataUriToBuffer(uri) {\n    if (!/^data:/i.test(uri)) {\n        throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n    }\n    // strip newlines\n    uri = uri.replace(/\\r?\\n/g, '');\n    // split the URI up into the \"metadata\" and the \"data\" portions\n    const firstComma = uri.indexOf(',');\n    if (firstComma === -1 || firstComma <= 4) {\n        throw new TypeError('malformed data: URI');\n    }\n    // remove the \"data:\" scheme and parse the metadata\n    const meta = uri.substring(5, firstComma).split(';');\n    let charset = '';\n    let base64 = false;\n    const type = meta[0] || 'text/plain';\n    let typeFull = type;\n    for (let i = 1; i < meta.length; i++) {\n        if (meta[i] === 'base64') {\n            base64 = true;\n        }\n        else if (meta[i]) {\n            typeFull += `;${meta[i]}`;\n            if (meta[i].indexOf('charset=') === 0) {\n                charset = meta[i].substring(8);\n            }\n        }\n    }\n    // defaults to US-ASCII only if type is not provided\n    if (!meta[0] && !charset.length) {\n        typeFull += ';charset=US-ASCII';\n        charset = 'US-ASCII';\n    }\n    // get the encoded data portion and decode URI-encoded chars\n    const encoding = base64 ? 'base64' : 'ascii';\n    const data = unescape(uri.substring(firstComma + 1));\n    const buffer = Buffer.from(data, encoding);\n    // set `.type` and `.typeFull` properties to MIME type\n    buffer.type = type;\n    buffer.typeFull = typeFull;\n    // set the `.charset` property\n    buffer.charset = charset;\n    return buffer;\n}\nexport default dataUriToBuffer;\n//# sourceMappingURL=index.js.map","export class FetchBaseError extends Error {\n\tconstructor(message, type) {\n\t\tsuper(message);\n\t\t// Hide custom error implementation details from end-users\n\t\tError.captureStackTrace(this, this.constructor);\n\n\t\tthis.type = type;\n\t}\n\n\tget name() {\n\t\treturn this.constructor.name;\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn this.constructor.name;\n\t}\n}\n","\nimport {FetchBaseError} from './base.js';\n\n/**\n * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError\n*/\n\n/**\n * FetchError interface for operational errors\n */\nexport class FetchError extends FetchBaseError {\n\t/**\n\t * @param  {string} message -      Error message for human\n\t * @param  {string} [type] -        Error type for machine\n\t * @param  {SystemError} [systemError] - For Node.js system error\n\t */\n\tconstructor(message, type, systemError) {\n\t\tsuper(message, type);\n\t\t// When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code\n\t\tif (systemError) {\n\t\t\t// eslint-disable-next-line no-multi-assign\n\t\t\tthis.code = this.errno = systemError.code;\n\t\t\tthis.erroredSysCall = systemError.syscall;\n\t\t}\n\t}\n}\n","/**\n * Is.js\n *\n * Object type checks.\n */\n\nconst NAME = Symbol.toStringTag;\n\n/**\n * Check if `obj` is a URLSearchParams object\n * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nexport const isURLSearchParameters = object => {\n\treturn (\n\t\ttypeof object === 'object' &&\n\t\ttypeof object.append === 'function' &&\n\t\ttypeof object.delete === 'function' &&\n\t\ttypeof object.get === 'function' &&\n\t\ttypeof object.getAll === 'function' &&\n\t\ttypeof object.has === 'function' &&\n\t\ttypeof object.set === 'function' &&\n\t\ttypeof object.sort === 'function' &&\n\t\tobject[NAME] === 'URLSearchParams'\n\t);\n};\n\n/**\n * Check if `object` is a W3C `Blob` object (which `File` inherits from)\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nexport const isBlob = object => {\n\treturn (\n\t\tobject &&\n\t\ttypeof object === 'object' &&\n\t\ttypeof object.arrayBuffer === 'function' &&\n\t\ttypeof object.type === 'string' &&\n\t\ttypeof object.stream === 'function' &&\n\t\ttypeof object.constructor === 'function' &&\n\t\t/^(Blob|File)$/.test(object[NAME])\n\t);\n};\n\n/**\n * Check if `obj` is an instance of AbortSignal.\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nexport const isAbortSignal = object => {\n\treturn (\n\t\ttypeof object === 'object' && (\n\t\t\tobject[NAME] === 'AbortSignal' ||\n\t\t\tobject[NAME] === 'EventTarget'\n\t\t)\n\t);\n};\n\n/**\n * isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of\n * the parent domain.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nexport const isDomainOrSubdomain = (destination, original) => {\n\tconst orig = new URL(original).hostname;\n\tconst dest = new URL(destination).hostname;\n\n\treturn orig === dest || orig.endsWith(`.${dest}`);\n};\n\n/**\n * isSameProtocol reports whether the two provided URLs use the same protocol.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nexport const isSameProtocol = (destination, original) => {\n\tconst orig = new URL(original).protocol;\n\tconst dest = new URL(destination).protocol;\n\n\treturn orig === dest;\n};\n","\n/**\n * Body.js\n *\n * Body interface provides common methods for Request and Response\n */\n\nimport Stream, {PassThrough} from 'node:stream';\nimport {types, deprecate, promisify} from 'node:util';\nimport {Buffer} from 'node:buffer';\n\nimport Blob from 'fetch-blob';\nimport {FormData, formDataToBlob} from 'formdata-polyfill/esm.min.js';\n\nimport {FetchError} from './errors/fetch-error.js';\nimport {FetchBaseError} from './errors/base.js';\nimport {isBlob, isURLSearchParameters} from './utils/is.js';\n\nconst pipeline = promisify(Stream.pipeline);\nconst INTERNALS = Symbol('Body internals');\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nexport default class Body {\n\tconstructor(body, {\n\t\tsize = 0\n\t} = {}) {\n\t\tlet boundary = null;\n\n\t\tif (body === null) {\n\t\t\t// Body is undefined or null\n\t\t\tbody = null;\n\t\t} else if (isURLSearchParameters(body)) {\n\t\t\t// Body is a URLSearchParams\n\t\t\tbody = Buffer.from(body.toString());\n\t\t} else if (isBlob(body)) {\n\t\t\t// Body is blob\n\t\t} else if (Buffer.isBuffer(body)) {\n\t\t\t// Body is Buffer\n\t\t} else if (types.isAnyArrayBuffer(body)) {\n\t\t\t// Body is ArrayBuffer\n\t\t\tbody = Buffer.from(body);\n\t\t} else if (ArrayBuffer.isView(body)) {\n\t\t\t// Body is ArrayBufferView\n\t\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n\t\t} else if (body instanceof Stream) {\n\t\t\t// Body is stream\n\t\t} else if (body instanceof FormData) {\n\t\t\t// Body is FormData\n\t\t\tbody = formDataToBlob(body);\n\t\t\tboundary = body.type.split('=')[1];\n\t\t} else {\n\t\t\t// None of the above\n\t\t\t// coerce to string then buffer\n\t\t\tbody = Buffer.from(String(body));\n\t\t}\n\n\t\tlet stream = body;\n\n\t\tif (Buffer.isBuffer(body)) {\n\t\t\tstream = Stream.Readable.from(body);\n\t\t} else if (isBlob(body)) {\n\t\t\tstream = Stream.Readable.from(body.stream());\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\tbody,\n\t\t\tstream,\n\t\t\tboundary,\n\t\t\tdisturbed: false,\n\t\t\terror: null\n\t\t};\n\t\tthis.size = size;\n\n\t\tif (body instanceof Stream) {\n\t\t\tbody.on('error', error_ => {\n\t\t\t\tconst error = error_ instanceof FetchBaseError ?\n\t\t\t\t\terror_ :\n\t\t\t\t\tnew FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, 'system', error_);\n\t\t\t\tthis[INTERNALS].error = error;\n\t\t\t});\n\t\t}\n\t}\n\n\tget body() {\n\t\treturn this[INTERNALS].stream;\n\t}\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t}\n\n\t/**\n\t * Decode response as ArrayBuffer\n\t *\n\t * @return  Promise\n\t */\n\tasync arrayBuffer() {\n\t\tconst {buffer, byteOffset, byteLength} = await consumeBody(this);\n\t\treturn buffer.slice(byteOffset, byteOffset + byteLength);\n\t}\n\n\tasync formData() {\n\t\tconst ct = this.headers.get('content-type');\n\n\t\tif (ct.startsWith('application/x-www-form-urlencoded')) {\n\t\t\tconst formData = new FormData();\n\t\t\tconst parameters = new URLSearchParams(await this.text());\n\n\t\t\tfor (const [name, value] of parameters) {\n\t\t\t\tformData.append(name, value);\n\t\t\t}\n\n\t\t\treturn formData;\n\t\t}\n\n\t\tconst {toFormData} = await import('./utils/multipart-parser.js');\n\t\treturn toFormData(this.body, ct);\n\t}\n\n\t/**\n\t * Return raw response as Blob\n\t *\n\t * @return Promise\n\t */\n\tasync blob() {\n\t\tconst ct = (this.headers && this.headers.get('content-type')) || (this[INTERNALS].body && this[INTERNALS].body.type) || '';\n\t\tconst buf = await this.arrayBuffer();\n\n\t\treturn new Blob([buf], {\n\t\t\ttype: ct\n\t\t});\n\t}\n\n\t/**\n\t * Decode response as json\n\t *\n\t * @return  Promise\n\t */\n\tasync json() {\n\t\tconst text = await this.text();\n\t\treturn JSON.parse(text);\n\t}\n\n\t/**\n\t * Decode response as text\n\t *\n\t * @return  Promise\n\t */\n\tasync text() {\n\t\tconst buffer = await consumeBody(this);\n\t\treturn new TextDecoder().decode(buffer);\n\t}\n\n\t/**\n\t * Decode response as buffer (non-spec api)\n\t *\n\t * @return  Promise\n\t */\n\tbuffer() {\n\t\treturn consumeBody(this);\n\t}\n}\n\nBody.prototype.buffer = deprecate(Body.prototype.buffer, 'Please use \\'response.arrayBuffer()\\' instead of \\'response.buffer()\\'', 'node-fetch#buffer');\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: {enumerable: true},\n\tbodyUsed: {enumerable: true},\n\tarrayBuffer: {enumerable: true},\n\tblob: {enumerable: true},\n\tjson: {enumerable: true},\n\ttext: {enumerable: true},\n\tdata: {get: deprecate(() => {},\n\t\t'data doesn\\'t exist, use json(), text(), arrayBuffer(), or body instead',\n\t\t'https://github.com/node-fetch/node-fetch/issues/1000 (response)')}\n});\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */\nasync function consumeBody(data) {\n\tif (data[INTERNALS].disturbed) {\n\t\tthrow new TypeError(`body used already for: ${data.url}`);\n\t}\n\n\tdata[INTERNALS].disturbed = true;\n\n\tif (data[INTERNALS].error) {\n\t\tthrow data[INTERNALS].error;\n\t}\n\n\tconst {body} = data;\n\n\t// Body is null\n\tif (body === null) {\n\t\treturn Buffer.alloc(0);\n\t}\n\n\t/* c8 ignore next 3 */\n\tif (!(body instanceof Stream)) {\n\t\treturn Buffer.alloc(0);\n\t}\n\n\t// Body is stream\n\t// get ready to actually consume the body\n\tconst accum = [];\n\tlet accumBytes = 0;\n\n\ttry {\n\t\tfor await (const chunk of body) {\n\t\t\tif (data.size > 0 && accumBytes + chunk.length > data.size) {\n\t\t\t\tconst error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, 'max-size');\n\t\t\t\tbody.destroy(error);\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t}\n\t} catch (error) {\n\t\tconst error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, 'system', error);\n\t\tthrow error_;\n\t}\n\n\tif (body.readableEnded === true || body._readableState.ended === true) {\n\t\ttry {\n\t\t\tif (accum.every(c => typeof c === 'string')) {\n\t\t\t\treturn Buffer.from(accum.join(''));\n\t\t\t}\n\n\t\t\treturn Buffer.concat(accum, accumBytes);\n\t\t} catch (error) {\n\t\t\tthrow new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, 'system', error);\n\t\t}\n\t} else {\n\t\tthrow new FetchError(`Premature close of server response while trying to fetch ${data.url}`);\n\t}\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */\nexport const clone = (instance, highWaterMark) => {\n\tlet p1;\n\tlet p2;\n\tlet {body} = instance[INTERNALS];\n\n\t// Don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// Check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif ((body instanceof Stream) && (typeof body.getBoundary !== 'function')) {\n\t\t// Tee instance body\n\t\tp1 = new PassThrough({highWaterMark});\n\t\tp2 = new PassThrough({highWaterMark});\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// Set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].stream = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n};\n\nconst getNonSpecFormDataBoundary = deprecate(\n\tbody => body.getBoundary(),\n\t'form-data doesn\\'t follow the spec and requires special treatment. Use alternative package',\n\t'https://github.com/node-fetch/node-fetch/issues/1167'\n);\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */\nexport const extractContentType = (body, request) => {\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn null;\n\t}\n\n\t// Body is string\n\tif (typeof body === 'string') {\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n\n\t// Body is a URLSearchParams\n\tif (isURLSearchParameters(body)) {\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t}\n\n\t// Body is blob\n\tif (isBlob(body)) {\n\t\treturn body.type || null;\n\t}\n\n\t// Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n\tif (Buffer.isBuffer(body) || types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n\t\treturn null;\n\t}\n\n\tif (body instanceof FormData) {\n\t\treturn `multipart/form-data; boundary=${request[INTERNALS].boundary}`;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getBoundary === 'function') {\n\t\treturn `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\n\t}\n\n\t// Body is stream - can't really do much about this\n\tif (body instanceof Stream) {\n\t\treturn null;\n\t}\n\n\t// Body constructor defaults other things to string\n\treturn 'text/plain;charset=UTF-8';\n};\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */\nexport const getTotalBytes = request => {\n\tconst {body} = request[INTERNALS];\n\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn 0;\n\t}\n\n\t// Body is Blob\n\tif (isBlob(body)) {\n\t\treturn body.size;\n\t}\n\n\t// Body is Buffer\n\tif (Buffer.isBuffer(body)) {\n\t\treturn body.length;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getLengthSync === 'function') {\n\t\treturn body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n\t}\n\n\t// Body is stream\n\treturn null;\n};\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {Promise<void>}\n */\nexport const writeToStream = async (dest, {body}) => {\n\tif (body === null) {\n\t\t// Body is null\n\t\tdest.end();\n\t} else {\n\t\t// Body is stream\n\t\tawait pipeline(body, dest);\n\t}\n};\n","/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */\n\nimport {types} from 'node:util';\nimport http from 'node:http';\n\n/* c8 ignore next 9 */\nconst validateHeaderName = typeof http.validateHeaderName === 'function' ?\n\thttp.validateHeaderName :\n\tname => {\n\t\tif (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n\t\t\tconst error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_HTTP_TOKEN'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\n/* c8 ignore next 9 */\nconst validateHeaderValue = typeof http.validateHeaderValue === 'function' ?\n\thttp.validateHeaderValue :\n\t(name, value) => {\n\t\tif (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value)) {\n\t\t\tconst error = new TypeError(`Invalid character in header content [\"${name}\"]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_CHAR'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */\n\n/**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */\nexport default class Headers extends URLSearchParams {\n\t/**\n\t * Headers class\n\t *\n\t * @constructor\n\t * @param {HeadersInit} [init] - Response headers\n\t */\n\tconstructor(init) {\n\t\t// Validate and normalize init object in [name, value(s)][]\n\t\t/** @type {string[][]} */\n\t\tlet result = [];\n\t\tif (init instanceof Headers) {\n\t\t\tconst raw = init.raw();\n\t\t\tfor (const [name, values] of Object.entries(raw)) {\n\t\t\t\tresult.push(...values.map(value => [name, value]));\n\t\t\t}\n\t\t} else if (init == null) { // eslint-disable-line no-eq-null, eqeqeq\n\t\t\t// No op\n\t\t} else if (typeof init === 'object' && !types.isBoxedPrimitive(init)) {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\t\tif (method == null) {\n\t\t\t\t// Record<ByteString, ByteString>\n\t\t\t\tresult.push(...Object.entries(init));\n\t\t\t} else {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// Sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tresult = [...init]\n\t\t\t\t\t.map(pair => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof pair !== 'object' || types.isBoxedPrimitive(pair)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be an iterable object');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t}).map(pair => {\n\t\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Failed to construct \\'Headers\\': The provided value is not of type \\'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');\n\t\t}\n\n\t\t// Validate and lowercase\n\t\tresult =\n\t\t\tresult.length > 0 ?\n\t\t\t\tresult.map(([name, value]) => {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn [String(name).toLowerCase(), String(value)];\n\t\t\t\t}) :\n\t\t\t\tundefined;\n\n\t\tsuper(result);\n\n\t\t// Returning a Proxy that will lowercase key names, validate parameters and sort keys\n\t\t// eslint-disable-next-line no-constructor-return\n\t\treturn new Proxy(this, {\n\t\t\tget(target, p, receiver) {\n\t\t\t\tswitch (p) {\n\t\t\t\t\tcase 'append':\n\t\t\t\t\tcase 'set':\n\t\t\t\t\t\treturn (name, value) => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase(),\n\t\t\t\t\t\t\t\tString(value)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'delete':\n\t\t\t\t\tcase 'has':\n\t\t\t\t\tcase 'getAll':\n\t\t\t\t\t\treturn name => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'keys':\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\ttarget.sort();\n\t\t\t\t\t\t\treturn new Set(URLSearchParams.prototype.keys.call(target)).keys();\n\t\t\t\t\t\t};\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn Reflect.get(target, p, receiver);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t/* c8 ignore next */\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn this.constructor.name;\n\t}\n\n\ttoString() {\n\t\treturn Object.prototype.toString.call(this);\n\t}\n\n\tget(name) {\n\t\tconst values = this.getAll(name);\n\t\tif (values.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet value = values.join(', ');\n\t\tif (/^content-encoding$/i.test(name)) {\n\t\t\tvalue = value.toLowerCase();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tforEach(callback, thisArg = undefined) {\n\t\tfor (const name of this.keys()) {\n\t\t\tReflect.apply(callback, thisArg, [this.get(name), name, this]);\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield this.get(name);\n\t\t}\n\t}\n\n\t/**\n\t * @type {() => IterableIterator<[string, string]>}\n\t */\n\t* entries() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield [name, this.get(name)];\n\t\t}\n\t}\n\n\t[Symbol.iterator]() {\n\t\treturn this.entries();\n\t}\n\n\t/**\n\t * Node-fetch non-spec method\n\t * returning all headers and their values as array\n\t * @returns {Record<string, string[]>}\n\t */\n\traw() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tresult[key] = this.getAll(key);\n\t\t\treturn result;\n\t\t}, {});\n\t}\n\n\t/**\n\t * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n\t */\n\t[Symbol.for('nodejs.util.inspect.custom')]() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tconst values = this.getAll(key);\n\t\t\t// Http.request() only supports string as Host header.\n\t\t\t// This hack makes specifying custom Host header possible.\n\t\t\tif (key === 'host') {\n\t\t\t\tresult[key] = values[0];\n\t\t\t} else {\n\t\t\t\tresult[key] = values.length > 1 ? values : values[0];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}, {});\n\t}\n}\n\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */\nObject.defineProperties(\n\tHeaders.prototype,\n\t['get', 'entries', 'forEach', 'values'].reduce((result, property) => {\n\t\tresult[property] = {enumerable: true};\n\t\treturn result;\n\t}, {})\n);\n\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */\nexport function fromRawHeaders(headers = []) {\n\treturn new Headers(\n\t\theaders\n\t\t\t// Split into pairs\n\t\t\t.reduce((result, value, index, array) => {\n\t\t\t\tif (index % 2 === 0) {\n\t\t\t\t\tresult.push(array.slice(index, index + 2));\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, [])\n\t\t\t.filter(([name, value]) => {\n\t\t\t\ttry {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn true;\n\t\t\t\t} catch {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t})\n\n\t);\n}\n","const redirectStatus = new Set([301, 302, 303, 307, 308]);\n\n/**\n * Redirect code matching\n *\n * @param {number} code - Status code\n * @return {boolean}\n */\nexport const isRedirect = code => {\n\treturn redirectStatus.has(code);\n};\n","/**\n * Response.js\n *\n * Response class provides content decoding\n */\n\nimport Headers from './headers.js';\nimport Body, {clone, extractContentType} from './body.js';\nimport {isRedirect} from './utils/is-redirect.js';\n\nconst INTERNALS = Symbol('Response internals');\n\n/**\n * Response class\n *\n * Ref: https://fetch.spec.whatwg.org/#response-class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nexport default class Response extends Body {\n\tconstructor(body = null, options = {}) {\n\t\tsuper(body, options);\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition\n\t\tconst status = options.status != null ? options.status : 200;\n\n\t\tconst headers = new Headers(options.headers);\n\n\t\tif (body !== null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(body, this);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\ttype: 'default',\n\t\t\turl: options.url,\n\t\t\tstatus,\n\t\t\tstatusText: options.statusText || '',\n\t\t\theaders,\n\t\t\tcounter: options.counter,\n\t\t\thighWaterMark: options.highWaterMark\n\t\t};\n\t}\n\n\tget type() {\n\t\treturn this[INTERNALS].type;\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS].url || '';\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS].status;\n\t}\n\n\t/**\n\t * Convenience property representing if the request ended normally\n\t */\n\tget ok() {\n\t\treturn this[INTERNALS].status >= 200 && this[INTERNALS].status < 300;\n\t}\n\n\tget redirected() {\n\t\treturn this[INTERNALS].counter > 0;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS].headers;\n\t}\n\n\tget highWaterMark() {\n\t\treturn this[INTERNALS].highWaterMark;\n\t}\n\n\t/**\n\t * Clone this response\n\t *\n\t * @return  Response\n\t */\n\tclone() {\n\t\treturn new Response(clone(this, this.highWaterMark), {\n\t\t\ttype: this.type,\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok,\n\t\t\tredirected: this.redirected,\n\t\t\tsize: this.size,\n\t\t\thighWaterMark: this.highWaterMark\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} url    The URL that the new response is to originate from.\n\t * @param {number} status An optional status code for the response (e.g., 302.)\n\t * @returns {Response}    A Response object.\n\t */\n\tstatic redirect(url, status = 302) {\n\t\tif (!isRedirect(status)) {\n\t\t\tthrow new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n\t\t}\n\n\t\treturn new Response(null, {\n\t\t\theaders: {\n\t\t\t\tlocation: new URL(url).toString()\n\t\t\t},\n\t\t\tstatus\n\t\t});\n\t}\n\n\tstatic error() {\n\t\tconst response = new Response(null, {status: 0, statusText: ''});\n\t\tresponse[INTERNALS].type = 'error';\n\t\treturn response;\n\t}\n\n\tstatic json(data = undefined, init = {}) {\n\t\tconst body = JSON.stringify(data);\n\n\t\tif (body === undefined) {\n\t\t\tthrow new TypeError('data is not JSON serializable');\n\t\t}\n\n\t\tconst headers = new Headers(init && init.headers);\n\n\t\tif (!headers.has('content-type')) {\n\t\t\theaders.set('content-type', 'application/json');\n\t\t}\n\n\t\treturn new Response(body, {\n\t\t\t...init,\n\t\t\theaders\n\t\t});\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'Response';\n\t}\n}\n\nObject.defineProperties(Response.prototype, {\n\ttype: {enumerable: true},\n\turl: {enumerable: true},\n\tstatus: {enumerable: true},\n\tok: {enumerable: true},\n\tredirected: {enumerable: true},\n\tstatusText: {enumerable: true},\n\theaders: {enumerable: true},\n\tclone: {enumerable: true}\n});\n","import {isIP} from 'node:net';\n\n/**\n * @external URL\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}\n */\n\n/**\n * @module utils/referrer\n * @private\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy §8.4. Strip url for use as a referrer}\n * @param {string} URL\n * @param {boolean} [originOnly=false]\n */\nexport function stripURLForUseAsAReferrer(url, originOnly = false) {\n\t// 1. If url is null, return no referrer.\n\tif (url == null) { // eslint-disable-line no-eq-null, eqeqeq\n\t\treturn 'no-referrer';\n\t}\n\n\turl = new URL(url);\n\n\t// 2. If url's scheme is a local scheme, then return no referrer.\n\tif (/^(about|blob|data):$/.test(url.protocol)) {\n\t\treturn 'no-referrer';\n\t}\n\n\t// 3. Set url's username to the empty string.\n\turl.username = '';\n\n\t// 4. Set url's password to null.\n\t// Note: `null` appears to be a mistake as this actually results in the password being `\"null\"`.\n\turl.password = '';\n\n\t// 5. Set url's fragment to null.\n\t// Note: `null` appears to be a mistake as this actually results in the fragment being `\"#null\"`.\n\turl.hash = '';\n\n\t// 6. If the origin-only flag is true, then:\n\tif (originOnly) {\n\t\t// 6.1. Set url's path to null.\n\t\t// Note: `null` appears to be a mistake as this actually results in the path being `\"/null\"`.\n\t\turl.pathname = '';\n\n\t\t// 6.2. Set url's query to null.\n\t\t// Note: `null` appears to be a mistake as this actually results in the query being `\"?null\"`.\n\t\turl.search = '';\n\t}\n\n\t// 7. Return url.\n\treturn url;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}\n */\nexport const ReferrerPolicy = new Set([\n\t'',\n\t'no-referrer',\n\t'no-referrer-when-downgrade',\n\t'same-origin',\n\t'origin',\n\t'strict-origin',\n\t'origin-when-cross-origin',\n\t'strict-origin-when-cross-origin',\n\t'unsafe-url'\n]);\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}\n */\nexport const DEFAULT_REFERRER_POLICY = 'strict-origin-when-cross-origin';\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy §3. Referrer Policies}\n * @param {string} referrerPolicy\n * @returns {string} referrerPolicy\n */\nexport function validateReferrerPolicy(referrerPolicy) {\n\tif (!ReferrerPolicy.has(referrerPolicy)) {\n\t\tthrow new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);\n\t}\n\n\treturn referrerPolicy;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy §3.2. Is origin potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\nexport function isOriginPotentiallyTrustworthy(url) {\n\t// 1. If origin is an opaque origin, return \"Not Trustworthy\".\n\t// Not applicable\n\n\t// 2. Assert: origin is a tuple origin.\n\t// Not for implementations\n\n\t// 3. If origin's scheme is either \"https\" or \"wss\", return \"Potentially Trustworthy\".\n\tif (/^(http|ws)s:$/.test(url.protocol)) {\n\t\treturn true;\n\t}\n\n\t// 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return \"Potentially Trustworthy\".\n\tconst hostIp = url.host.replace(/(^\\[)|(]$)/g, '');\n\tconst hostIPVersion = isIP(hostIp);\n\n\tif (hostIPVersion === 4 && /^127\\./.test(hostIp)) {\n\t\treturn true;\n\t}\n\n\tif (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {\n\t\treturn true;\n\t}\n\n\t// 5. If origin's host component is \"localhost\" or falls within \".localhost\", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return \"Potentially Trustworthy\".\n\t// We are returning FALSE here because we cannot ensure conformance to\n\t// let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)\n\tif (url.host === 'localhost' || url.host.endsWith('.localhost')) {\n\t\treturn false;\n\t}\n\n\t// 6. If origin's scheme component is file, return \"Potentially Trustworthy\".\n\tif (url.protocol === 'file:') {\n\t\treturn true;\n\t}\n\n\t// 7. If origin's scheme component is one which the user agent considers to be authenticated, return \"Potentially Trustworthy\".\n\t// Not supported\n\n\t// 8. If origin has been configured as a trustworthy origin, return \"Potentially Trustworthy\".\n\t// Not supported\n\n\t// 9. Return \"Not Trustworthy\".\n\treturn false;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy §3.3. Is url potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\nexport function isUrlPotentiallyTrustworthy(url) {\n\t// 1. If url is \"about:blank\" or \"about:srcdoc\", return \"Potentially Trustworthy\".\n\tif (/^about:(blank|srcdoc)$/.test(url)) {\n\t\treturn true;\n\t}\n\n\t// 2. If url's scheme is \"data\", return \"Potentially Trustworthy\".\n\tif (url.protocol === 'data:') {\n\t\treturn true;\n\t}\n\n\t// Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were\n\t// created. Therefore, blobs created in a trustworthy origin will themselves be potentially\n\t// trustworthy.\n\tif (/^(blob|filesystem):$/.test(url.protocol)) {\n\t\treturn true;\n\t}\n\n\t// 3. Return the result of executing §3.2 Is origin potentially trustworthy? on url's origin.\n\treturn isOriginPotentiallyTrustworthy(url);\n}\n\n/**\n * Modifies the referrerURL to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerURLCallback\n * @param {external:URL} referrerURL\n * @returns {external:URL} modified referrerURL\n */\n\n/**\n * Modifies the referrerOrigin to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerOriginCallback\n * @param {external:URL} referrerOrigin\n * @returns {external:URL} modified referrerOrigin\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}\n * @param {Request} request\n * @param {object} o\n * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback\n * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback\n * @returns {external:URL} Request's referrer\n */\nexport function determineRequestsReferrer(request, {referrerURLCallback, referrerOriginCallback} = {}) {\n\t// There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for\n\t// these cases:\n\t// > Note: If request's referrer is \"no-referrer\", Fetch will not call into this algorithm.\n\t// > Note: If request's referrer policy is the empty string, Fetch will not call into this\n\t// > algorithm.\n\tif (request.referrer === 'no-referrer' || request.referrerPolicy === '') {\n\t\treturn null;\n\t}\n\n\t// 1. Let policy be request's associated referrer policy.\n\tconst policy = request.referrerPolicy;\n\n\t// 2. Let environment be request's client.\n\t// not applicable to node.js\n\n\t// 3. Switch on request's referrer:\n\tif (request.referrer === 'about:client') {\n\t\treturn 'no-referrer';\n\t}\n\n\t// \"a URL\": Let referrerSource be request's referrer.\n\tconst referrerSource = request.referrer;\n\n\t// 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.\n\tlet referrerURL = stripURLForUseAsAReferrer(referrerSource);\n\n\t// 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the\n\t//    origin-only flag set to true.\n\tlet referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);\n\n\t// 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set\n\t//    referrerURL to referrerOrigin.\n\tif (referrerURL.toString().length > 4096) {\n\t\treferrerURL = referrerOrigin;\n\t}\n\n\t// 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary\n\t//    policy considerations in the interests of minimizing data leakage. For example, the user\n\t//    agent could strip the URL down to an origin, modify its host, replace it with an empty\n\t//    string, etc.\n\tif (referrerURLCallback) {\n\t\treferrerURL = referrerURLCallback(referrerURL);\n\t}\n\n\tif (referrerOriginCallback) {\n\t\treferrerOrigin = referrerOriginCallback(referrerOrigin);\n\t}\n\n\t// 8.Execute the statements corresponding to the value of policy:\n\tconst currentURL = new URL(request.url);\n\n\tswitch (policy) {\n\t\tcase 'no-referrer':\n\t\t\treturn 'no-referrer';\n\n\t\tcase 'origin':\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'unsafe-url':\n\t\t\treturn referrerURL;\n\n\t\tcase 'strict-origin':\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 2. Return referrerOrigin.\n\t\t\treturn referrerOrigin.toString();\n\n\t\tcase 'strict-origin-when-cross-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 3. Return referrerOrigin.\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'same-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// 2. Return no referrer.\n\t\t\treturn 'no-referrer';\n\n\t\tcase 'origin-when-cross-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// Return referrerOrigin.\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'no-referrer-when-downgrade':\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 2. Return referrerURL.\n\t\t\treturn referrerURL;\n\n\t\tdefault:\n\t\t\tthrow new TypeError(`Invalid referrerPolicy: ${policy}`);\n\t}\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy §8.1. Parse a referrer policy from a Referrer-Policy header}\n * @param {Headers} headers Response headers\n * @returns {string} policy\n */\nexport function parseReferrerPolicyFromHeader(headers) {\n\t// 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`\n\t//    and response’s header list.\n\tconst policyTokens = (headers.get('referrer-policy') || '').split(/[,\\s]+/);\n\n\t// 2. Let policy be the empty string.\n\tlet policy = '';\n\n\t// 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty\n\t//    string, then set policy to token.\n\t// Note: This algorithm loops over multiple policy values to allow deployment of new policy\n\t// values with fallbacks for older user agents, as described in § 11.1 Unknown Policy Values.\n\tfor (const token of policyTokens) {\n\t\tif (token && ReferrerPolicy.has(token)) {\n\t\t\tpolicy = token;\n\t\t}\n\t}\n\n\t// 4. Return policy.\n\treturn policy;\n}\n","/**\n * Request.js\n *\n * Request class contains server only options\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport {format as formatUrl} from 'node:url';\nimport {deprecate} from 'node:util';\nimport Headers from './headers.js';\nimport Body, {clone, extractContentType, getTotalBytes} from './body.js';\nimport {isAbortSignal} from './utils/is.js';\nimport {getSearch} from './utils/get-search.js';\nimport {\n\tvalidateReferrerPolicy, determineRequestsReferrer, DEFAULT_REFERRER_POLICY\n} from './utils/referrer.js';\n\nconst INTERNALS = Symbol('Request internals');\n\n/**\n * Check if `obj` is an instance of Request.\n *\n * @param  {*} object\n * @return {boolean}\n */\nconst isRequest = object => {\n\treturn (\n\t\ttypeof object === 'object' &&\n\t\ttypeof object[INTERNALS] === 'object'\n\t);\n};\n\nconst doBadDataWarn = deprecate(() => {},\n\t'.data is not a valid RequestInit property, use .body instead',\n\t'https://github.com/node-fetch/node-fetch/issues/1000 (request)');\n\n/**\n * Request class\n *\n * Ref: https://fetch.spec.whatwg.org/#request-class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nexport default class Request extends Body {\n\tconstructor(input, init = {}) {\n\t\tlet parsedURL;\n\n\t\t// Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)\n\t\tif (isRequest(input)) {\n\t\t\tparsedURL = new URL(input.url);\n\t\t} else {\n\t\t\tparsedURL = new URL(input);\n\t\t\tinput = {};\n\t\t}\n\n\t\tif (parsedURL.username !== '' || parsedURL.password !== '') {\n\t\t\tthrow new TypeError(`${parsedURL} is an url with embedded credentials.`);\n\t\t}\n\n\t\tlet method = init.method || input.method || 'GET';\n\t\tif (/^(delete|get|head|options|post|put)$/i.test(method)) {\n\t\t\tmethod = method.toUpperCase();\n\t\t}\n\n\t\tif (!isRequest(init) && 'data' in init) {\n\t\t\tdoBadDataWarn();\n\t\t}\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tif ((init.body != null || (isRequest(input) && input.body !== null)) &&\n\t\t\t(method === 'GET' || method === 'HEAD')) {\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\n\t\t}\n\n\t\tconst inputBody = init.body ?\n\t\t\tinit.body :\n\t\t\t(isRequest(input) && input.body !== null ?\n\t\t\t\tclone(input) :\n\t\t\t\tnull);\n\n\t\tsuper(inputBody, {\n\t\t\tsize: init.size || input.size || 0\n\t\t});\n\n\t\tconst headers = new Headers(init.headers || input.headers || {});\n\n\t\tif (inputBody !== null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(inputBody, this);\n\t\t\tif (contentType) {\n\t\t\t\theaders.set('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tlet signal = isRequest(input) ?\n\t\t\tinput.signal :\n\t\t\tnull;\n\t\tif ('signal' in init) {\n\t\t\tsignal = init.signal;\n\t\t}\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tif (signal != null && !isAbortSignal(signal)) {\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal or EventTarget');\n\t\t}\n\n\t\t// §5.4, Request constructor steps, step 15.1\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tlet referrer = init.referrer == null ? input.referrer : init.referrer;\n\t\tif (referrer === '') {\n\t\t\t// §5.4, Request constructor steps, step 15.2\n\t\t\treferrer = 'no-referrer';\n\t\t} else if (referrer) {\n\t\t\t// §5.4, Request constructor steps, step 15.3.1, 15.3.2\n\t\t\tconst parsedReferrer = new URL(referrer);\n\t\t\t// §5.4, Request constructor steps, step 15.3.3, 15.3.4\n\t\t\treferrer = /^about:(\\/\\/)?client$/.test(parsedReferrer) ? 'client' : parsedReferrer;\n\t\t} else {\n\t\t\treferrer = undefined;\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\tmethod,\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\n\t\t\theaders,\n\t\t\tparsedURL,\n\t\t\tsignal,\n\t\t\treferrer\n\t\t};\n\n\t\t// Node-fetch-only options\n\t\tthis.follow = init.follow === undefined ? (input.follow === undefined ? 20 : input.follow) : init.follow;\n\t\tthis.compress = init.compress === undefined ? (input.compress === undefined ? true : input.compress) : init.compress;\n\t\tthis.counter = init.counter || input.counter || 0;\n\t\tthis.agent = init.agent || input.agent;\n\t\tthis.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;\n\t\tthis.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;\n\n\t\t// §5.4, Request constructor steps, step 16.\n\t\t// Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy\n\t\tthis.referrerPolicy = init.referrerPolicy || input.referrerPolicy || '';\n\t}\n\n\t/** @returns {string} */\n\tget method() {\n\t\treturn this[INTERNALS].method;\n\t}\n\n\t/** @returns {string} */\n\tget url() {\n\t\treturn formatUrl(this[INTERNALS].parsedURL);\n\t}\n\n\t/** @returns {Headers} */\n\tget headers() {\n\t\treturn this[INTERNALS].headers;\n\t}\n\n\tget redirect() {\n\t\treturn this[INTERNALS].redirect;\n\t}\n\n\t/** @returns {AbortSignal} */\n\tget signal() {\n\t\treturn this[INTERNALS].signal;\n\t}\n\n\t// https://fetch.spec.whatwg.org/#dom-request-referrer\n\tget referrer() {\n\t\tif (this[INTERNALS].referrer === 'no-referrer') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (this[INTERNALS].referrer === 'client') {\n\t\t\treturn 'about:client';\n\t\t}\n\n\t\tif (this[INTERNALS].referrer) {\n\t\t\treturn this[INTERNALS].referrer.toString();\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tget referrerPolicy() {\n\t\treturn this[INTERNALS].referrerPolicy;\n\t}\n\n\tset referrerPolicy(referrerPolicy) {\n\t\tthis[INTERNALS].referrerPolicy = validateReferrerPolicy(referrerPolicy);\n\t}\n\n\t/**\n\t * Clone this request\n\t *\n\t * @return  Request\n\t */\n\tclone() {\n\t\treturn new Request(this);\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'Request';\n\t}\n}\n\nObject.defineProperties(Request.prototype, {\n\tmethod: {enumerable: true},\n\turl: {enumerable: true},\n\theaders: {enumerable: true},\n\tredirect: {enumerable: true},\n\tclone: {enumerable: true},\n\tsignal: {enumerable: true},\n\treferrer: {enumerable: true},\n\treferrerPolicy: {enumerable: true}\n});\n\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param {Request} request - A Request instance\n * @return The options object to be passed to http.request\n */\nexport const getNodeRequestOptions = request => {\n\tconst {parsedURL} = request[INTERNALS];\n\tconst headers = new Headers(request[INTERNALS].headers);\n\n\t// Fetch step 1.3\n\tif (!headers.has('Accept')) {\n\t\theaders.set('Accept', '*/*');\n\t}\n\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\n\tlet contentLengthValue = null;\n\tif (request.body === null && /^(post|put)$/i.test(request.method)) {\n\t\tcontentLengthValue = '0';\n\t}\n\n\tif (request.body !== null) {\n\t\tconst totalBytes = getTotalBytes(request);\n\t\t// Set Content-Length if totalBytes is a number (that is not NaN)\n\t\tif (typeof totalBytes === 'number' && !Number.isNaN(totalBytes)) {\n\t\t\tcontentLengthValue = String(totalBytes);\n\t\t}\n\t}\n\n\tif (contentLengthValue) {\n\t\theaders.set('Content-Length', contentLengthValue);\n\t}\n\n\t// 4.1. Main fetch, step 2.6\n\t// > If request's referrer policy is the empty string, then set request's referrer policy to the\n\t// > default referrer policy.\n\tif (request.referrerPolicy === '') {\n\t\trequest.referrerPolicy = DEFAULT_REFERRER_POLICY;\n\t}\n\n\t// 4.1. Main fetch, step 2.7\n\t// > If request's referrer is not \"no-referrer\", set request's referrer to the result of invoking\n\t// > determine request's referrer.\n\tif (request.referrer && request.referrer !== 'no-referrer') {\n\t\trequest[INTERNALS].referrer = determineRequestsReferrer(request);\n\t} else {\n\t\trequest[INTERNALS].referrer = 'no-referrer';\n\t}\n\n\t// 4.5. HTTP-network-or-cache fetch, step 6.9\n\t// > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized\n\t// >  and isomorphic encoded, to httpRequest's header list.\n\tif (request[INTERNALS].referrer instanceof URL) {\n\t\theaders.set('Referer', request.referrer);\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.11\n\tif (!headers.has('User-Agent')) {\n\t\theaders.set('User-Agent', 'node-fetch');\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.15\n\tif (request.compress && !headers.has('Accept-Encoding')) {\n\t\theaders.set('Accept-Encoding', 'gzip, deflate, br');\n\t}\n\n\tlet {agent} = request;\n\tif (typeof agent === 'function') {\n\t\tagent = agent(parsedURL);\n\t}\n\n\t// HTTP-network fetch step 4.2\n\t// chunked encoding is handled by Node.js\n\n\tconst search = getSearch(parsedURL);\n\n\t// Pass the full URL directly to request(), but overwrite the following\n\t// options:\n\tconst options = {\n\t\t// Overwrite search to retain trailing ? (issue #776)\n\t\tpath: parsedURL.pathname + search,\n\t\t// The following options are not expressed in the URL\n\t\tmethod: request.method,\n\t\theaders: headers[Symbol.for('nodejs.util.inspect.custom')](),\n\t\tinsecureHTTPParser: request.insecureHTTPParser,\n\t\tagent\n\t};\n\n\treturn {\n\t\t/** @type {URL} */\n\t\tparsedURL,\n\t\toptions\n\t};\n};\n","export const getSearch = parsedURL => {\n\tif (parsedURL.search) {\n\t\treturn parsedURL.search;\n\t}\n\n\tconst lastOffset = parsedURL.href.length - 1;\n\tconst hash = parsedURL.hash || (parsedURL.href[lastOffset] === '#' ? '#' : '');\n\treturn parsedURL.href[lastOffset - hash.length] === '?' ? '?' : '';\n};\n","import {FetchBaseError} from './base.js';\n\n/**\n * AbortError interface for cancelled requests\n */\nexport class AbortError extends FetchBaseError {\n\tconstructor(message, type = 'aborted') {\n\t\tsuper(message, type);\n\t}\n}\n","/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport http from 'node:http';\nimport https from 'node:https';\nimport zlib from 'node:zlib';\nimport Stream, {PassThrough, pipeline as pump} from 'node:stream';\nimport {Buffer} from 'node:buffer';\n\nimport dataUriToBuffer from 'data-uri-to-buffer';\n\nimport {writeToStream, clone} from './body.js';\nimport Response from './response.js';\nimport Headers, {fromRawHeaders} from './headers.js';\nimport Request, {getNodeRequestOptions} from './request.js';\nimport {FetchError} from './errors/fetch-error.js';\nimport {AbortError} from './errors/abort-error.js';\nimport {isRedirect} from './utils/is-redirect.js';\nimport {FormData} from 'formdata-polyfill/esm.min.js';\nimport {isDomainOrSubdomain, isSameProtocol} from './utils/is.js';\nimport {parseReferrerPolicyFromHeader} from './utils/referrer.js';\nimport {\n\tBlob,\n\tFile,\n\tfileFromSync,\n\tfileFrom,\n\tblobFromSync,\n\tblobFrom\n} from 'fetch-blob/from.js';\n\nexport {FormData, Headers, Request, Response, FetchError, AbortError, isRedirect};\nexport {Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom};\n\nconst supportedSchemas = new Set(['data:', 'http:', 'https:']);\n\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\nexport default async function fetch(url, options_) {\n\treturn new Promise((resolve, reject) => {\n\t\t// Build request object\n\t\tconst request = new Request(url, options_);\n\t\tconst {parsedURL, options} = getNodeRequestOptions(request);\n\t\tif (!supportedSchemas.has(parsedURL.protocol)) {\n\t\t\tthrow new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, '')}\" is not supported.`);\n\t\t}\n\n\t\tif (parsedURL.protocol === 'data:') {\n\t\t\tconst data = dataUriToBuffer(request.url);\n\t\t\tconst response = new Response(data, {headers: {'Content-Type': data.typeFull}});\n\t\t\tresolve(response);\n\t\t\treturn;\n\t\t}\n\n\t\t// Wrap http.request into fetch\n\t\tconst send = (parsedURL.protocol === 'https:' ? https : http).request;\n\t\tconst {signal} = request;\n\t\tlet response = null;\n\n\t\tconst abort = () => {\n\t\t\tconst error = new AbortError('The operation was aborted.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof Stream.Readable) {\n\t\t\t\trequest.body.destroy(error);\n\t\t\t}\n\n\t\t\tif (!response || !response.body) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = () => {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// Send request\n\t\tconst request_ = send(parsedURL.toString(), options);\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tconst finalize = () => {\n\t\t\trequest_.abort();\n\t\t\tif (signal) {\n\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t}\n\t\t};\n\n\t\trequest_.on('error', error => {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(request_, error => {\n\t\t\tif (response && response.body) {\n\t\t\t\tresponse.body.destroy(error);\n\t\t\t}\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (process.version < 'v14') {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\trequest_.on('socket', s => {\n\t\t\t\tlet endedWithEventsCount;\n\t\t\t\ts.prependListener('end', () => {\n\t\t\t\t\tendedWithEventsCount = s._eventsCount;\n\t\t\t\t});\n\t\t\t\ts.prependListener('close', hadError => {\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && endedWithEventsCount < s._eventsCount && !hadError) {\n\t\t\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\t\tresponse.body.emit('error', error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\trequest_.on('response', response_ => {\n\t\t\trequest_.setTimeout(0);\n\t\t\tconst headers = fromRawHeaders(response_.rawHeaders);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (isRedirect(response_.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tlet locationURL = null;\n\t\t\t\ttry {\n\t\t\t\t\tlocationURL = location === null ? null : new URL(location, request.url);\n\t\t\t\t} catch {\n\t\t\t\t\t// error here can only be invalid URL in Location: header\n\t\t\t\t\t// do not throw when options.redirect == manual\n\t\t\t\t\t// let the user extract the errorneous redirect URL\n\t\t\t\t\tif (request.redirect !== 'manual') {\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// Nothing to do\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow': {\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOptions = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: clone(request),\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\tsize: request.size,\n\t\t\t\t\t\t\treferrer: request.referrer,\n\t\t\t\t\t\t\treferrerPolicy: request.referrerPolicy\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// when forwarding sensitive headers like \"Authorization\",\n\t\t\t\t\t\t// \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n\t\t\t\t\t\t// headers will be ignored when following a redirect to a domain\n\t\t\t\t\t\t// that is not a subdomain match or exact match of the initial domain.\n\t\t\t\t\t\t// For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n\t\t\t\t\t\t// will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n\t\t\t\t\t\t// headers will also be ignored when following a redirect to a domain using\n\t\t\t\t\t\t// a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n\t\t\t\t\t\t// will not forward the sensitive headers\n\t\t\t\t\t\tif (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n\t\t\t\t\t\t\tfor (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n\t\t\t\t\t\t\t\trequestOptions.headers.delete(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {\n\t\t\t\t\t\t\trequestOptions.method = 'GET';\n\t\t\t\t\t\t\trequestOptions.body = undefined;\n\t\t\t\t\t\t\trequestOptions.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 14\n\t\t\t\t\t\tconst responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n\t\t\t\t\t\tif (responseReferrerPolicy) {\n\t\t\t\t\t\t\trequestOptions.referrerPolicy = responseReferrerPolicy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOptions)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Prepare response\n\t\t\tif (signal) {\n\t\t\t\tresponse_.once('end', () => {\n\t\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet body = pump(response_, new PassThrough(), error => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// see https://github.com/nodejs/node/pull/29376\n\t\t\t/* c8 ignore next 3 */\n\t\t\tif (process.version < 'v12.10') {\n\t\t\t\tresponse_.on('aborted', abortAndFinalize);\n\t\t\t}\n\n\t\t\tconst responseOptions = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: response_.statusCode,\n\t\t\t\tstatusText: response_.statusMessage,\n\t\t\t\theaders,\n\t\t\t\tsize: request.size,\n\t\t\t\tcounter: request.counter,\n\t\t\t\thighWaterMark: request.highWaterMark\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// For gzip\n\t\t\tif (codings === 'gzip' || codings === 'x-gzip') {\n\t\t\t\tbody = pump(body, zlib.createGunzip(zlibOptions), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For deflate\n\t\t\tif (codings === 'deflate' || codings === 'x-deflate') {\n\t\t\t\t// Handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = pump(response_, new PassThrough(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\traw.once('data', chunk => {\n\t\t\t\t\t// See http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = pump(body, zlib.createInflate(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = pump(body, zlib.createInflateRaw(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\traw.once('end', () => {\n\t\t\t\t\t// Some old IIS servers return zero-length OK deflate responses, so\n\t\t\t\t\t// 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n\t\t\t\t\tif (!response) {\n\t\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For br\n\t\t\tif (codings === 'br') {\n\t\t\t\tbody = pump(body, zlib.createBrotliDecompress(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise, use response as-is\n\t\t\tresponse = new Response(body, responseOptions);\n\t\t\tresolve(response);\n\t\t});\n\n\t\t// eslint-disable-next-line promise/prefer-await-to-then\n\t\twriteToStream(request_, request).catch(reject);\n\t});\n}\n\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\tconst LAST_CHUNK = Buffer.from('0\\r\\n\\r\\n');\n\n\tlet isChunkedTransfer = false;\n\tlet properLastChunkReceived = false;\n\tlet previousChunk;\n\n\trequest.on('response', response => {\n\t\tconst {headers} = response;\n\t\tisChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n\t});\n\n\trequest.on('socket', socket => {\n\t\tconst onSocketClose = () => {\n\t\t\tif (isChunkedTransfer && !properLastChunkReceived) {\n\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\terrorCallback(error);\n\t\t\t}\n\t\t};\n\n\t\tconst onData = buf => {\n\t\t\tproperLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n\n\t\t\t// Sometimes final 0-length chunk and end of message code are in separate packets\n\t\t\tif (!properLastChunkReceived && previousChunk) {\n\t\t\t\tproperLastChunkReceived = (\n\t\t\t\t\tBuffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 &&\n\t\t\t\t\tBuffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpreviousChunk = buf;\n\t\t};\n\n\t\tsocket.prependListener('close', onSocketClose);\n\t\tsocket.on('data', onData);\n\n\t\trequest.on('close', () => {\n\t\t\tsocket.removeListener('close', onSocketClose);\n\t\t\tsocket.removeListener('data', onData);\n\t\t});\n\t});\n}\n","import { statSync, createReadStream, promises as fs } from 'node:fs'\nimport { basename } from 'node:path'\nimport DOMException from 'node-domexception'\n\nimport File from './file.js'\nimport Blob from './index.js'\n\nconst { stat } = fs\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst blobFromSync = (path, type) => fromBlob(statSync(path), path, type)\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<Blob>}\n */\nconst blobFrom = (path, type) => stat(path).then(stat => fromBlob(stat, path, type))\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<File>}\n */\nconst fileFrom = (path, type) => stat(path).then(stat => fromFile(stat, path, type))\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst fileFromSync = (path, type) => fromFile(statSync(path), path, type)\n\n// @ts-ignore\nconst fromBlob = (stat, path, type = '') => new Blob([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], { type })\n\n// @ts-ignore\nconst fromFile = (stat, path, type = '') => new File([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], basename(path), { type, lastModified: stat.mtimeMs })\n\n/**\n * This is a blob backed up by a file on the disk\n * with minium requirement. Its wrapped around a Blob as a blobPart\n * so you have no direct access to this.\n *\n * @private\n */\nclass BlobDataItem {\n  #path\n  #start\n\n  constructor (options) {\n    this.#path = options.path\n    this.#start = options.start\n    this.size = options.size\n    this.lastModified = options.lastModified\n  }\n\n  /**\n   * Slicing arguments is first validated and formatted\n   * to not be out of range by Blob.prototype.slice\n   */\n  slice (start, end) {\n    return new BlobDataItem({\n      path: this.#path,\n      lastModified: this.lastModified,\n      size: end - start,\n      start: this.#start + start\n    })\n  }\n\n  async * stream () {\n    const { mtimeMs } = await stat(this.#path)\n    if (mtimeMs > this.lastModified) {\n      throw new DOMException('The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.', 'NotReadableError')\n    }\n    yield * createReadStream(this.#path, {\n      start: this.#start,\n      end: this.#start + this.size - 1\n    })\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n}\n\nexport default blobFromSync\nexport { File, Blob, blobFrom, blobFromSync, fileFrom, fileFromSync }\n","/**\n * @license\n * web-streams-polyfill v3.3.3\n * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.\n * This code is released under the MIT license.\n * SPDX-License-Identifier: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.WebStreamsPolyfill = {}));\n})(this, (function (exports) { 'use strict';\n\n    function noop() {\n        return undefined;\n    }\n\n    function typeIsObject(x) {\n        return (typeof x === 'object' && x !== null) || typeof x === 'function';\n    }\n    const rethrowAssertionErrorRejection = noop;\n    function setFunctionName(fn, name) {\n        try {\n            Object.defineProperty(fn, 'name', {\n                value: name,\n                configurable: true\n            });\n        }\n        catch (_a) {\n            // This property is non-configurable in older browsers, so ignore if this throws.\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n        }\n    }\n\n    const originalPromise = Promise;\n    const originalPromiseThen = Promise.prototype.then;\n    const originalPromiseReject = Promise.reject.bind(originalPromise);\n    // https://webidl.spec.whatwg.org/#a-new-promise\n    function newPromise(executor) {\n        return new originalPromise(executor);\n    }\n    // https://webidl.spec.whatwg.org/#a-promise-resolved-with\n    function promiseResolvedWith(value) {\n        return newPromise(resolve => resolve(value));\n    }\n    // https://webidl.spec.whatwg.org/#a-promise-rejected-with\n    function promiseRejectedWith(reason) {\n        return originalPromiseReject(reason);\n    }\n    function PerformPromiseThen(promise, onFulfilled, onRejected) {\n        // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n        // approximation.\n        return originalPromiseThen.call(promise, onFulfilled, onRejected);\n    }\n    // Bluebird logs a warning when a promise is created within a fulfillment handler, but then isn't returned\n    // from that handler. To prevent this, return null instead of void from all handlers.\n    // http://bluebirdjs.com/docs/warning-explanations.html#warning-a-promise-was-created-in-a-handler-but-was-not-returned-from-it\n    function uponPromise(promise, onFulfilled, onRejected) {\n        PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);\n    }\n    function uponFulfillment(promise, onFulfilled) {\n        uponPromise(promise, onFulfilled);\n    }\n    function uponRejection(promise, onRejected) {\n        uponPromise(promise, undefined, onRejected);\n    }\n    function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\n        return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n    }\n    function setPromiseIsHandledToTrue(promise) {\n        PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n    }\n    let _queueMicrotask = callback => {\n        if (typeof queueMicrotask === 'function') {\n            _queueMicrotask = queueMicrotask;\n        }\n        else {\n            const resolvedPromise = promiseResolvedWith(undefined);\n            _queueMicrotask = cb => PerformPromiseThen(resolvedPromise, cb);\n        }\n        return _queueMicrotask(callback);\n    };\n    function reflectCall(F, V, args) {\n        if (typeof F !== 'function') {\n            throw new TypeError('Argument is not a function');\n        }\n        return Function.prototype.apply.call(F, V, args);\n    }\n    function promiseCall(F, V, args) {\n        try {\n            return promiseResolvedWith(reflectCall(F, V, args));\n        }\n        catch (value) {\n            return promiseRejectedWith(value);\n        }\n    }\n\n    // Original from Chromium\n    // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n    const QUEUE_MAX_ARRAY_SIZE = 16384;\n    /**\n     * Simple queue structure.\n     *\n     * Avoids scalability issues with using a packed array directly by using\n     * multiple arrays in a linked list and keeping the array size bounded.\n     */\n    class SimpleQueue {\n        constructor() {\n            this._cursor = 0;\n            this._size = 0;\n            // _front and _back are always defined.\n            this._front = {\n                _elements: [],\n                _next: undefined\n            };\n            this._back = this._front;\n            // The cursor is used to avoid calling Array.shift().\n            // It contains the index of the front element of the array inside the\n            // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n            this._cursor = 0;\n            // When there is only one node, size === elements.length - cursor.\n            this._size = 0;\n        }\n        get length() {\n            return this._size;\n        }\n        // For exception safety, this method is structured in order:\n        // 1. Read state\n        // 2. Calculate required state mutations\n        // 3. Perform state mutations\n        push(element) {\n            const oldBack = this._back;\n            let newBack = oldBack;\n            if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n                newBack = {\n                    _elements: [],\n                    _next: undefined\n                };\n            }\n            // push() is the mutation most likely to throw an exception, so it\n            // goes first.\n            oldBack._elements.push(element);\n            if (newBack !== oldBack) {\n                this._back = newBack;\n                oldBack._next = newBack;\n            }\n            ++this._size;\n        }\n        // Like push(), shift() follows the read -> calculate -> mutate pattern for\n        // exception safety.\n        shift() { // must not be called on an empty queue\n            const oldFront = this._front;\n            let newFront = oldFront;\n            const oldCursor = this._cursor;\n            let newCursor = oldCursor + 1;\n            const elements = oldFront._elements;\n            const element = elements[oldCursor];\n            if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n                newFront = oldFront._next;\n                newCursor = 0;\n            }\n            // No mutations before this point.\n            --this._size;\n            this._cursor = newCursor;\n            if (oldFront !== newFront) {\n                this._front = newFront;\n            }\n            // Permit shifted element to be garbage collected.\n            elements[oldCursor] = undefined;\n            return element;\n        }\n        // The tricky thing about forEach() is that it can be called\n        // re-entrantly. The queue may be mutated inside the callback. It is easy to\n        // see that push() within the callback has no negative effects since the end\n        // of the queue is checked for on every iteration. If shift() is called\n        // repeatedly within the callback then the next iteration may return an\n        // element that has been removed. In this case the callback will be called\n        // with undefined values until we either \"catch up\" with elements that still\n        // exist or reach the back of the queue.\n        forEach(callback) {\n            let i = this._cursor;\n            let node = this._front;\n            let elements = node._elements;\n            while (i !== elements.length || node._next !== undefined) {\n                if (i === elements.length) {\n                    node = node._next;\n                    elements = node._elements;\n                    i = 0;\n                    if (elements.length === 0) {\n                        break;\n                    }\n                }\n                callback(elements[i]);\n                ++i;\n            }\n        }\n        // Return the element that would be returned if shift() was called now,\n        // without modifying the queue.\n        peek() { // must not be called on an empty queue\n            const front = this._front;\n            const cursor = this._cursor;\n            return front._elements[cursor];\n        }\n    }\n\n    const AbortSteps = Symbol('[[AbortSteps]]');\n    const ErrorSteps = Symbol('[[ErrorSteps]]');\n    const CancelSteps = Symbol('[[CancelSteps]]');\n    const PullSteps = Symbol('[[PullSteps]]');\n    const ReleaseSteps = Symbol('[[ReleaseSteps]]');\n\n    function ReadableStreamReaderGenericInitialize(reader, stream) {\n        reader._ownerReadableStream = stream;\n        stream._reader = reader;\n        if (stream._state === 'readable') {\n            defaultReaderClosedPromiseInitialize(reader);\n        }\n        else if (stream._state === 'closed') {\n            defaultReaderClosedPromiseInitializeAsResolved(reader);\n        }\n        else {\n            defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n        }\n    }\n    // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n    // check.\n    function ReadableStreamReaderGenericCancel(reader, reason) {\n        const stream = reader._ownerReadableStream;\n        return ReadableStreamCancel(stream, reason);\n    }\n    function ReadableStreamReaderGenericRelease(reader) {\n        const stream = reader._ownerReadableStream;\n        if (stream._state === 'readable') {\n            defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n        }\n        else {\n            defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n        }\n        stream._readableStreamController[ReleaseSteps]();\n        stream._reader = undefined;\n        reader._ownerReadableStream = undefined;\n    }\n    // Helper functions for the readers.\n    function readerLockException(name) {\n        return new TypeError('Cannot ' + name + ' a stream using a released reader');\n    }\n    // Helper functions for the ReadableStreamDefaultReader.\n    function defaultReaderClosedPromiseInitialize(reader) {\n        reader._closedPromise = newPromise((resolve, reject) => {\n            reader._closedPromise_resolve = resolve;\n            reader._closedPromise_reject = reject;\n        });\n    }\n    function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n        defaultReaderClosedPromiseInitialize(reader);\n        defaultReaderClosedPromiseReject(reader, reason);\n    }\n    function defaultReaderClosedPromiseInitializeAsResolved(reader) {\n        defaultReaderClosedPromiseInitialize(reader);\n        defaultReaderClosedPromiseResolve(reader);\n    }\n    function defaultReaderClosedPromiseReject(reader, reason) {\n        if (reader._closedPromise_reject === undefined) {\n            return;\n        }\n        setPromiseIsHandledToTrue(reader._closedPromise);\n        reader._closedPromise_reject(reason);\n        reader._closedPromise_resolve = undefined;\n        reader._closedPromise_reject = undefined;\n    }\n    function defaultReaderClosedPromiseResetToRejected(reader, reason) {\n        defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n    }\n    function defaultReaderClosedPromiseResolve(reader) {\n        if (reader._closedPromise_resolve === undefined) {\n            return;\n        }\n        reader._closedPromise_resolve(undefined);\n        reader._closedPromise_resolve = undefined;\n        reader._closedPromise_reject = undefined;\n    }\n\n    /// <reference lib=\"es2015.core\" />\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\n    const NumberIsFinite = Number.isFinite || function (x) {\n        return typeof x === 'number' && isFinite(x);\n    };\n\n    /// <reference lib=\"es2015.core\" />\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\n    const MathTrunc = Math.trunc || function (v) {\n        return v < 0 ? Math.ceil(v) : Math.floor(v);\n    };\n\n    // https://heycam.github.io/webidl/#idl-dictionaries\n    function isDictionary(x) {\n        return typeof x === 'object' || typeof x === 'function';\n    }\n    function assertDictionary(obj, context) {\n        if (obj !== undefined && !isDictionary(obj)) {\n            throw new TypeError(`${context} is not an object.`);\n        }\n    }\n    // https://heycam.github.io/webidl/#idl-callback-functions\n    function assertFunction(x, context) {\n        if (typeof x !== 'function') {\n            throw new TypeError(`${context} is not a function.`);\n        }\n    }\n    // https://heycam.github.io/webidl/#idl-object\n    function isObject(x) {\n        return (typeof x === 'object' && x !== null) || typeof x === 'function';\n    }\n    function assertObject(x, context) {\n        if (!isObject(x)) {\n            throw new TypeError(`${context} is not an object.`);\n        }\n    }\n    function assertRequiredArgument(x, position, context) {\n        if (x === undefined) {\n            throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n        }\n    }\n    function assertRequiredField(x, field, context) {\n        if (x === undefined) {\n            throw new TypeError(`${field} is required in '${context}'.`);\n        }\n    }\n    // https://heycam.github.io/webidl/#idl-unrestricted-double\n    function convertUnrestrictedDouble(value) {\n        return Number(value);\n    }\n    function censorNegativeZero(x) {\n        return x === 0 ? 0 : x;\n    }\n    function integerPart(x) {\n        return censorNegativeZero(MathTrunc(x));\n    }\n    // https://heycam.github.io/webidl/#idl-unsigned-long-long\n    function convertUnsignedLongLongWithEnforceRange(value, context) {\n        const lowerBound = 0;\n        const upperBound = Number.MAX_SAFE_INTEGER;\n        let x = Number(value);\n        x = censorNegativeZero(x);\n        if (!NumberIsFinite(x)) {\n            throw new TypeError(`${context} is not a finite number`);\n        }\n        x = integerPart(x);\n        if (x < lowerBound || x > upperBound) {\n            throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n        }\n        if (!NumberIsFinite(x) || x === 0) {\n            return 0;\n        }\n        // TODO Use BigInt if supported?\n        // let xBigInt = BigInt(integerPart(x));\n        // xBigInt = BigInt.asUintN(64, xBigInt);\n        // return Number(xBigInt);\n        return x;\n    }\n\n    function assertReadableStream(x, context) {\n        if (!IsReadableStream(x)) {\n            throw new TypeError(`${context} is not a ReadableStream.`);\n        }\n    }\n\n    // Abstract operations for the ReadableStream.\n    function AcquireReadableStreamDefaultReader(stream) {\n        return new ReadableStreamDefaultReader(stream);\n    }\n    // ReadableStream API exposed for controllers.\n    function ReadableStreamAddReadRequest(stream, readRequest) {\n        stream._reader._readRequests.push(readRequest);\n    }\n    function ReadableStreamFulfillReadRequest(stream, chunk, done) {\n        const reader = stream._reader;\n        const readRequest = reader._readRequests.shift();\n        if (done) {\n            readRequest._closeSteps();\n        }\n        else {\n            readRequest._chunkSteps(chunk);\n        }\n    }\n    function ReadableStreamGetNumReadRequests(stream) {\n        return stream._reader._readRequests.length;\n    }\n    function ReadableStreamHasDefaultReader(stream) {\n        const reader = stream._reader;\n        if (reader === undefined) {\n            return false;\n        }\n        if (!IsReadableStreamDefaultReader(reader)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * A default reader vended by a {@link ReadableStream}.\n     *\n     * @public\n     */\n    class ReadableStreamDefaultReader {\n        constructor(stream) {\n            assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n            assertReadableStream(stream, 'First parameter');\n            if (IsReadableStreamLocked(stream)) {\n                throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n            }\n            ReadableStreamReaderGenericInitialize(this, stream);\n            this._readRequests = new SimpleQueue();\n        }\n        /**\n         * Returns a promise that will be fulfilled when the stream becomes closed,\n         * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n         */\n        get closed() {\n            if (!IsReadableStreamDefaultReader(this)) {\n                return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n            }\n            return this._closedPromise;\n        }\n        /**\n         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n         */\n        cancel(reason = undefined) {\n            if (!IsReadableStreamDefaultReader(this)) {\n                return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n            }\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('cancel'));\n            }\n            return ReadableStreamReaderGenericCancel(this, reason);\n        }\n        /**\n         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n         *\n         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n         */\n        read() {\n            if (!IsReadableStreamDefaultReader(this)) {\n                return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n            }\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('read from'));\n            }\n            let resolvePromise;\n            let rejectPromise;\n            const promise = newPromise((resolve, reject) => {\n                resolvePromise = resolve;\n                rejectPromise = reject;\n            });\n            const readRequest = {\n                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n                _closeSteps: () => resolvePromise({ value: undefined, done: true }),\n                _errorSteps: e => rejectPromise(e)\n            };\n            ReadableStreamDefaultReaderRead(this, readRequest);\n            return promise;\n        }\n        /**\n         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n         * from now on; otherwise, the reader will appear closed.\n         *\n         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n         * do so will throw a `TypeError` and leave the reader locked to the stream.\n         */\n        releaseLock() {\n            if (!IsReadableStreamDefaultReader(this)) {\n                throw defaultReaderBrandCheckException('releaseLock');\n            }\n            if (this._ownerReadableStream === undefined) {\n                return;\n            }\n            ReadableStreamDefaultReaderRelease(this);\n        }\n    }\n    Object.defineProperties(ReadableStreamDefaultReader.prototype, {\n        cancel: { enumerable: true },\n        read: { enumerable: true },\n        releaseLock: { enumerable: true },\n        closed: { enumerable: true }\n    });\n    setFunctionName(ReadableStreamDefaultReader.prototype.cancel, 'cancel');\n    setFunctionName(ReadableStreamDefaultReader.prototype.read, 'read');\n    setFunctionName(ReadableStreamDefaultReader.prototype.releaseLock, 'releaseLock');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamDefaultReader.prototype, Symbol.toStringTag, {\n            value: 'ReadableStreamDefaultReader',\n            configurable: true\n        });\n    }\n    // Abstract operations for the readers.\n    function IsReadableStreamDefaultReader(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n            return false;\n        }\n        return x instanceof ReadableStreamDefaultReader;\n    }\n    function ReadableStreamDefaultReaderRead(reader, readRequest) {\n        const stream = reader._ownerReadableStream;\n        stream._disturbed = true;\n        if (stream._state === 'closed') {\n            readRequest._closeSteps();\n        }\n        else if (stream._state === 'errored') {\n            readRequest._errorSteps(stream._storedError);\n        }\n        else {\n            stream._readableStreamController[PullSteps](readRequest);\n        }\n    }\n    function ReadableStreamDefaultReaderRelease(reader) {\n        ReadableStreamReaderGenericRelease(reader);\n        const e = new TypeError('Reader was released');\n        ReadableStreamDefaultReaderErrorReadRequests(reader, e);\n    }\n    function ReadableStreamDefaultReaderErrorReadRequests(reader, e) {\n        const readRequests = reader._readRequests;\n        reader._readRequests = new SimpleQueue();\n        readRequests.forEach(readRequest => {\n            readRequest._errorSteps(e);\n        });\n    }\n    // Helper functions for the ReadableStreamDefaultReader.\n    function defaultReaderBrandCheckException(name) {\n        return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n    }\n\n    /// <reference lib=\"es2018.asynciterable\" />\n    /* eslint-disable @typescript-eslint/no-empty-function */\n    const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () { }).prototype);\n\n    /// <reference lib=\"es2018.asynciterable\" />\n    class ReadableStreamAsyncIteratorImpl {\n        constructor(reader, preventCancel) {\n            this._ongoingPromise = undefined;\n            this._isFinished = false;\n            this._reader = reader;\n            this._preventCancel = preventCancel;\n        }\n        next() {\n            const nextSteps = () => this._nextSteps();\n            this._ongoingPromise = this._ongoingPromise ?\n                transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :\n                nextSteps();\n            return this._ongoingPromise;\n        }\n        return(value) {\n            const returnSteps = () => this._returnSteps(value);\n            return this._ongoingPromise ?\n                transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :\n                returnSteps();\n        }\n        _nextSteps() {\n            if (this._isFinished) {\n                return Promise.resolve({ value: undefined, done: true });\n            }\n            const reader = this._reader;\n            let resolvePromise;\n            let rejectPromise;\n            const promise = newPromise((resolve, reject) => {\n                resolvePromise = resolve;\n                rejectPromise = reject;\n            });\n            const readRequest = {\n                _chunkSteps: chunk => {\n                    this._ongoingPromise = undefined;\n                    // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n                    // FIXME Is this a bug in the specification, or in the test?\n                    _queueMicrotask(() => resolvePromise({ value: chunk, done: false }));\n                },\n                _closeSteps: () => {\n                    this._ongoingPromise = undefined;\n                    this._isFinished = true;\n                    ReadableStreamReaderGenericRelease(reader);\n                    resolvePromise({ value: undefined, done: true });\n                },\n                _errorSteps: reason => {\n                    this._ongoingPromise = undefined;\n                    this._isFinished = true;\n                    ReadableStreamReaderGenericRelease(reader);\n                    rejectPromise(reason);\n                }\n            };\n            ReadableStreamDefaultReaderRead(reader, readRequest);\n            return promise;\n        }\n        _returnSteps(value) {\n            if (this._isFinished) {\n                return Promise.resolve({ value, done: true });\n            }\n            this._isFinished = true;\n            const reader = this._reader;\n            if (!this._preventCancel) {\n                const result = ReadableStreamReaderGenericCancel(reader, value);\n                ReadableStreamReaderGenericRelease(reader);\n                return transformPromiseWith(result, () => ({ value, done: true }));\n            }\n            ReadableStreamReaderGenericRelease(reader);\n            return promiseResolvedWith({ value, done: true });\n        }\n    }\n    const ReadableStreamAsyncIteratorPrototype = {\n        next() {\n            if (!IsReadableStreamAsyncIterator(this)) {\n                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n            }\n            return this._asyncIteratorImpl.next();\n        },\n        return(value) {\n            if (!IsReadableStreamAsyncIterator(this)) {\n                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n            }\n            return this._asyncIteratorImpl.return(value);\n        }\n    };\n    Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n    // Abstract operations for the ReadableStream.\n    function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\n        const reader = AcquireReadableStreamDefaultReader(stream);\n        const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n        const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\n        iterator._asyncIteratorImpl = impl;\n        return iterator;\n    }\n    function IsReadableStreamAsyncIterator(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n            return false;\n        }\n        try {\n            // noinspection SuspiciousTypeOfGuard\n            return x._asyncIteratorImpl instanceof\n                ReadableStreamAsyncIteratorImpl;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    // Helper functions for the ReadableStream.\n    function streamAsyncIteratorBrandCheckException(name) {\n        return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n    }\n\n    /// <reference lib=\"es2015.core\" />\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\n    const NumberIsNaN = Number.isNaN || function (x) {\n        // eslint-disable-next-line no-self-compare\n        return x !== x;\n    };\n\n    var _a, _b, _c;\n    function CreateArrayFromList(elements) {\n        // We use arrays to represent lists, so this is basically a no-op.\n        // Do a slice though just in case we happen to depend on the unique-ness.\n        return elements.slice();\n    }\n    function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\n        new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n    }\n    let TransferArrayBuffer = (O) => {\n        if (typeof O.transfer === 'function') {\n            TransferArrayBuffer = buffer => buffer.transfer();\n        }\n        else if (typeof structuredClone === 'function') {\n            TransferArrayBuffer = buffer => structuredClone(buffer, { transfer: [buffer] });\n        }\n        else {\n            // Not implemented correctly\n            TransferArrayBuffer = buffer => buffer;\n        }\n        return TransferArrayBuffer(O);\n    };\n    let IsDetachedBuffer = (O) => {\n        if (typeof O.detached === 'boolean') {\n            IsDetachedBuffer = buffer => buffer.detached;\n        }\n        else {\n            // Not implemented correctly\n            IsDetachedBuffer = buffer => buffer.byteLength === 0;\n        }\n        return IsDetachedBuffer(O);\n    };\n    function ArrayBufferSlice(buffer, begin, end) {\n        // ArrayBuffer.prototype.slice is not available on IE10\n        // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n        if (buffer.slice) {\n            return buffer.slice(begin, end);\n        }\n        const length = end - begin;\n        const slice = new ArrayBuffer(length);\n        CopyDataBlockBytes(slice, 0, buffer, begin, length);\n        return slice;\n    }\n    function GetMethod(receiver, prop) {\n        const func = receiver[prop];\n        if (func === undefined || func === null) {\n            return undefined;\n        }\n        if (typeof func !== 'function') {\n            throw new TypeError(`${String(prop)} is not a function`);\n        }\n        return func;\n    }\n    function CreateAsyncFromSyncIterator(syncIteratorRecord) {\n        // Instead of re-implementing CreateAsyncFromSyncIterator and %AsyncFromSyncIteratorPrototype%,\n        // we use yield* inside an async generator function to achieve the same result.\n        // Wrap the sync iterator inside a sync iterable, so we can use it with yield*.\n        const syncIterable = {\n            [Symbol.iterator]: () => syncIteratorRecord.iterator\n        };\n        // Create an async generator function and immediately invoke it.\n        const asyncIterator = (async function* () {\n            return yield* syncIterable;\n        }());\n        // Return as an async iterator record.\n        const nextMethod = asyncIterator.next;\n        return { iterator: asyncIterator, nextMethod, done: false };\n    }\n    // Aligns with core-js/modules/es.symbol.async-iterator.js\n    const SymbolAsyncIterator = (_c = (_a = Symbol.asyncIterator) !== null && _a !== void 0 ? _a : (_b = Symbol.for) === null || _b === void 0 ? void 0 : _b.call(Symbol, 'Symbol.asyncIterator')) !== null && _c !== void 0 ? _c : '@@asyncIterator';\n    function GetIterator(obj, hint = 'sync', method) {\n        if (method === undefined) {\n            if (hint === 'async') {\n                method = GetMethod(obj, SymbolAsyncIterator);\n                if (method === undefined) {\n                    const syncMethod = GetMethod(obj, Symbol.iterator);\n                    const syncIteratorRecord = GetIterator(obj, 'sync', syncMethod);\n                    return CreateAsyncFromSyncIterator(syncIteratorRecord);\n                }\n            }\n            else {\n                method = GetMethod(obj, Symbol.iterator);\n            }\n        }\n        if (method === undefined) {\n            throw new TypeError('The object is not iterable');\n        }\n        const iterator = reflectCall(method, obj, []);\n        if (!typeIsObject(iterator)) {\n            throw new TypeError('The iterator method must return an object');\n        }\n        const nextMethod = iterator.next;\n        return { iterator, nextMethod, done: false };\n    }\n    function IteratorNext(iteratorRecord) {\n        const result = reflectCall(iteratorRecord.nextMethod, iteratorRecord.iterator, []);\n        if (!typeIsObject(result)) {\n            throw new TypeError('The iterator.next() method must return an object');\n        }\n        return result;\n    }\n    function IteratorComplete(iterResult) {\n        return Boolean(iterResult.done);\n    }\n    function IteratorValue(iterResult) {\n        return iterResult.value;\n    }\n\n    function IsNonNegativeNumber(v) {\n        if (typeof v !== 'number') {\n            return false;\n        }\n        if (NumberIsNaN(v)) {\n            return false;\n        }\n        if (v < 0) {\n            return false;\n        }\n        return true;\n    }\n    function CloneAsUint8Array(O) {\n        const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n        return new Uint8Array(buffer);\n    }\n\n    function DequeueValue(container) {\n        const pair = container._queue.shift();\n        container._queueTotalSize -= pair.size;\n        if (container._queueTotalSize < 0) {\n            container._queueTotalSize = 0;\n        }\n        return pair.value;\n    }\n    function EnqueueValueWithSize(container, value, size) {\n        if (!IsNonNegativeNumber(size) || size === Infinity) {\n            throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n        }\n        container._queue.push({ value, size });\n        container._queueTotalSize += size;\n    }\n    function PeekQueueValue(container) {\n        const pair = container._queue.peek();\n        return pair.value;\n    }\n    function ResetQueue(container) {\n        container._queue = new SimpleQueue();\n        container._queueTotalSize = 0;\n    }\n\n    function isDataViewConstructor(ctor) {\n        return ctor === DataView;\n    }\n    function isDataView(view) {\n        return isDataViewConstructor(view.constructor);\n    }\n    function arrayBufferViewElementSize(ctor) {\n        if (isDataViewConstructor(ctor)) {\n            return 1;\n        }\n        return ctor.BYTES_PER_ELEMENT;\n    }\n\n    /**\n     * A pull-into request in a {@link ReadableByteStreamController}.\n     *\n     * @public\n     */\n    class ReadableStreamBYOBRequest {\n        constructor() {\n            throw new TypeError('Illegal constructor');\n        }\n        /**\n         * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n         */\n        get view() {\n            if (!IsReadableStreamBYOBRequest(this)) {\n                throw byobRequestBrandCheckException('view');\n            }\n            return this._view;\n        }\n        respond(bytesWritten) {\n            if (!IsReadableStreamBYOBRequest(this)) {\n                throw byobRequestBrandCheckException('respond');\n            }\n            assertRequiredArgument(bytesWritten, 1, 'respond');\n            bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n            if (this._associatedReadableByteStreamController === undefined) {\n                throw new TypeError('This BYOB request has been invalidated');\n            }\n            if (IsDetachedBuffer(this._view.buffer)) {\n                throw new TypeError(`The BYOB request's buffer has been detached and so cannot be used as a response`);\n            }\n            ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n        }\n        respondWithNewView(view) {\n            if (!IsReadableStreamBYOBRequest(this)) {\n                throw byobRequestBrandCheckException('respondWithNewView');\n            }\n            assertRequiredArgument(view, 1, 'respondWithNewView');\n            if (!ArrayBuffer.isView(view)) {\n                throw new TypeError('You can only respond with array buffer views');\n            }\n            if (this._associatedReadableByteStreamController === undefined) {\n                throw new TypeError('This BYOB request has been invalidated');\n            }\n            if (IsDetachedBuffer(view.buffer)) {\n                throw new TypeError('The given view\\'s buffer has been detached and so cannot be used as a response');\n            }\n            ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n        }\n    }\n    Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\n        respond: { enumerable: true },\n        respondWithNewView: { enumerable: true },\n        view: { enumerable: true }\n    });\n    setFunctionName(ReadableStreamBYOBRequest.prototype.respond, 'respond');\n    setFunctionName(ReadableStreamBYOBRequest.prototype.respondWithNewView, 'respondWithNewView');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamBYOBRequest.prototype, Symbol.toStringTag, {\n            value: 'ReadableStreamBYOBRequest',\n            configurable: true\n        });\n    }\n    /**\n     * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n     *\n     * @public\n     */\n    class ReadableByteStreamController {\n        constructor() {\n            throw new TypeError('Illegal constructor');\n        }\n        /**\n         * Returns the current BYOB pull request, or `null` if there isn't one.\n         */\n        get byobRequest() {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('byobRequest');\n            }\n            return ReadableByteStreamControllerGetBYOBRequest(this);\n        }\n        /**\n         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n         * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n         */\n        get desiredSize() {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('desiredSize');\n            }\n            return ReadableByteStreamControllerGetDesiredSize(this);\n        }\n        /**\n         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n         * the stream, but once those are read, the stream will become closed.\n         */\n        close() {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('close');\n            }\n            if (this._closeRequested) {\n                throw new TypeError('The stream has already been closed; do not close it again!');\n            }\n            const state = this._controlledReadableByteStream._state;\n            if (state !== 'readable') {\n                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n            }\n            ReadableByteStreamControllerClose(this);\n        }\n        enqueue(chunk) {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('enqueue');\n            }\n            assertRequiredArgument(chunk, 1, 'enqueue');\n            if (!ArrayBuffer.isView(chunk)) {\n                throw new TypeError('chunk must be an array buffer view');\n            }\n            if (chunk.byteLength === 0) {\n                throw new TypeError('chunk must have non-zero byteLength');\n            }\n            if (chunk.buffer.byteLength === 0) {\n                throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n            }\n            if (this._closeRequested) {\n                throw new TypeError('stream is closed or draining');\n            }\n            const state = this._controlledReadableByteStream._state;\n            if (state !== 'readable') {\n                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n            }\n            ReadableByteStreamControllerEnqueue(this, chunk);\n        }\n        /**\n         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n         */\n        error(e = undefined) {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('error');\n            }\n            ReadableByteStreamControllerError(this, e);\n        }\n        /** @internal */\n        [CancelSteps](reason) {\n            ReadableByteStreamControllerClearPendingPullIntos(this);\n            ResetQueue(this);\n            const result = this._cancelAlgorithm(reason);\n            ReadableByteStreamControllerClearAlgorithms(this);\n            return result;\n        }\n        /** @internal */\n        [PullSteps](readRequest) {\n            const stream = this._controlledReadableByteStream;\n            if (this._queueTotalSize > 0) {\n                ReadableByteStreamControllerFillReadRequestFromQueue(this, readRequest);\n                return;\n            }\n            const autoAllocateChunkSize = this._autoAllocateChunkSize;\n            if (autoAllocateChunkSize !== undefined) {\n                let buffer;\n                try {\n                    buffer = new ArrayBuffer(autoAllocateChunkSize);\n                }\n                catch (bufferE) {\n                    readRequest._errorSteps(bufferE);\n                    return;\n                }\n                const pullIntoDescriptor = {\n                    buffer,\n                    bufferByteLength: autoAllocateChunkSize,\n                    byteOffset: 0,\n                    byteLength: autoAllocateChunkSize,\n                    bytesFilled: 0,\n                    minimumFill: 1,\n                    elementSize: 1,\n                    viewConstructor: Uint8Array,\n                    readerType: 'default'\n                };\n                this._pendingPullIntos.push(pullIntoDescriptor);\n            }\n            ReadableStreamAddReadRequest(stream, readRequest);\n            ReadableByteStreamControllerCallPullIfNeeded(this);\n        }\n        /** @internal */\n        [ReleaseSteps]() {\n            if (this._pendingPullIntos.length > 0) {\n                const firstPullInto = this._pendingPullIntos.peek();\n                firstPullInto.readerType = 'none';\n                this._pendingPullIntos = new SimpleQueue();\n                this._pendingPullIntos.push(firstPullInto);\n            }\n        }\n    }\n    Object.defineProperties(ReadableByteStreamController.prototype, {\n        close: { enumerable: true },\n        enqueue: { enumerable: true },\n        error: { enumerable: true },\n        byobRequest: { enumerable: true },\n        desiredSize: { enumerable: true }\n    });\n    setFunctionName(ReadableByteStreamController.prototype.close, 'close');\n    setFunctionName(ReadableByteStreamController.prototype.enqueue, 'enqueue');\n    setFunctionName(ReadableByteStreamController.prototype.error, 'error');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableByteStreamController.prototype, Symbol.toStringTag, {\n            value: 'ReadableByteStreamController',\n            configurable: true\n        });\n    }\n    // Abstract operations for the ReadableByteStreamController.\n    function IsReadableByteStreamController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n            return false;\n        }\n        return x instanceof ReadableByteStreamController;\n    }\n    function IsReadableStreamBYOBRequest(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n            return false;\n        }\n        return x instanceof ReadableStreamBYOBRequest;\n    }\n    function ReadableByteStreamControllerCallPullIfNeeded(controller) {\n        const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n        if (!shouldPull) {\n            return;\n        }\n        if (controller._pulling) {\n            controller._pullAgain = true;\n            return;\n        }\n        controller._pulling = true;\n        // TODO: Test controller argument\n        const pullPromise = controller._pullAlgorithm();\n        uponPromise(pullPromise, () => {\n            controller._pulling = false;\n            if (controller._pullAgain) {\n                controller._pullAgain = false;\n                ReadableByteStreamControllerCallPullIfNeeded(controller);\n            }\n            return null;\n        }, e => {\n            ReadableByteStreamControllerError(controller, e);\n            return null;\n        });\n    }\n    function ReadableByteStreamControllerClearPendingPullIntos(controller) {\n        ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n        controller._pendingPullIntos = new SimpleQueue();\n    }\n    function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n        let done = false;\n        if (stream._state === 'closed') {\n            done = true;\n        }\n        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n        if (pullIntoDescriptor.readerType === 'default') {\n            ReadableStreamFulfillReadRequest(stream, filledView, done);\n        }\n        else {\n            ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n        }\n    }\n    function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n        const bytesFilled = pullIntoDescriptor.bytesFilled;\n        const elementSize = pullIntoDescriptor.elementSize;\n        return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n    }\n    function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n        controller._queue.push({ buffer, byteOffset, byteLength });\n        controller._queueTotalSize += byteLength;\n    }\n    function ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, buffer, byteOffset, byteLength) {\n        let clonedChunk;\n        try {\n            clonedChunk = ArrayBufferSlice(buffer, byteOffset, byteOffset + byteLength);\n        }\n        catch (cloneE) {\n            ReadableByteStreamControllerError(controller, cloneE);\n            throw cloneE;\n        }\n        ReadableByteStreamControllerEnqueueChunkToQueue(controller, clonedChunk, 0, byteLength);\n    }\n    function ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, firstDescriptor) {\n        if (firstDescriptor.bytesFilled > 0) {\n            ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, firstDescriptor.buffer, firstDescriptor.byteOffset, firstDescriptor.bytesFilled);\n        }\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n    }\n    function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n        const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n        const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n        let totalBytesToCopyRemaining = maxBytesToCopy;\n        let ready = false;\n        const remainderBytes = maxBytesFilled % pullIntoDescriptor.elementSize;\n        const maxAlignedBytes = maxBytesFilled - remainderBytes;\n        // A descriptor for a read() request that is not yet filled up to its minimum length will stay at the head\n        // of the queue, so the underlying source can keep filling it.\n        if (maxAlignedBytes >= pullIntoDescriptor.minimumFill) {\n            totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n            ready = true;\n        }\n        const queue = controller._queue;\n        while (totalBytesToCopyRemaining > 0) {\n            const headOfQueue = queue.peek();\n            const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n            const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n            CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n            if (headOfQueue.byteLength === bytesToCopy) {\n                queue.shift();\n            }\n            else {\n                headOfQueue.byteOffset += bytesToCopy;\n                headOfQueue.byteLength -= bytesToCopy;\n            }\n            controller._queueTotalSize -= bytesToCopy;\n            ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n            totalBytesToCopyRemaining -= bytesToCopy;\n        }\n        return ready;\n    }\n    function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n        pullIntoDescriptor.bytesFilled += size;\n    }\n    function ReadableByteStreamControllerHandleQueueDrain(controller) {\n        if (controller._queueTotalSize === 0 && controller._closeRequested) {\n            ReadableByteStreamControllerClearAlgorithms(controller);\n            ReadableStreamClose(controller._controlledReadableByteStream);\n        }\n        else {\n            ReadableByteStreamControllerCallPullIfNeeded(controller);\n        }\n    }\n    function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n        if (controller._byobRequest === null) {\n            return;\n        }\n        controller._byobRequest._associatedReadableByteStreamController = undefined;\n        controller._byobRequest._view = null;\n        controller._byobRequest = null;\n    }\n    function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n        while (controller._pendingPullIntos.length > 0) {\n            if (controller._queueTotalSize === 0) {\n                return;\n            }\n            const pullIntoDescriptor = controller._pendingPullIntos.peek();\n            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                ReadableByteStreamControllerShiftPendingPullInto(controller);\n                ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n            }\n        }\n    }\n    function ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller) {\n        const reader = controller._controlledReadableByteStream._reader;\n        while (reader._readRequests.length > 0) {\n            if (controller._queueTotalSize === 0) {\n                return;\n            }\n            const readRequest = reader._readRequests.shift();\n            ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest);\n        }\n    }\n    function ReadableByteStreamControllerPullInto(controller, view, min, readIntoRequest) {\n        const stream = controller._controlledReadableByteStream;\n        const ctor = view.constructor;\n        const elementSize = arrayBufferViewElementSize(ctor);\n        const { byteOffset, byteLength } = view;\n        const minimumFill = min * elementSize;\n        let buffer;\n        try {\n            buffer = TransferArrayBuffer(view.buffer);\n        }\n        catch (e) {\n            readIntoRequest._errorSteps(e);\n            return;\n        }\n        const pullIntoDescriptor = {\n            buffer,\n            bufferByteLength: buffer.byteLength,\n            byteOffset,\n            byteLength,\n            bytesFilled: 0,\n            minimumFill,\n            elementSize,\n            viewConstructor: ctor,\n            readerType: 'byob'\n        };\n        if (controller._pendingPullIntos.length > 0) {\n            controller._pendingPullIntos.push(pullIntoDescriptor);\n            // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n            // - No change happens on desiredSize\n            // - The source has already been notified of that there's at least 1 pending read(view)\n            ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n            return;\n        }\n        if (stream._state === 'closed') {\n            const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n            readIntoRequest._closeSteps(emptyView);\n            return;\n        }\n        if (controller._queueTotalSize > 0) {\n            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n                ReadableByteStreamControllerHandleQueueDrain(controller);\n                readIntoRequest._chunkSteps(filledView);\n                return;\n            }\n            if (controller._closeRequested) {\n                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n                ReadableByteStreamControllerError(controller, e);\n                readIntoRequest._errorSteps(e);\n                return;\n            }\n        }\n        controller._pendingPullIntos.push(pullIntoDescriptor);\n        ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n    function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n        if (firstDescriptor.readerType === 'none') {\n            ReadableByteStreamControllerShiftPendingPullInto(controller);\n        }\n        const stream = controller._controlledReadableByteStream;\n        if (ReadableStreamHasBYOBReader(stream)) {\n            while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n                const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n                ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n            }\n        }\n    }\n    function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n        ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n        if (pullIntoDescriptor.readerType === 'none') {\n            ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, pullIntoDescriptor);\n            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n            return;\n        }\n        if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.minimumFill) {\n            // A descriptor for a read() request that is not yet filled up to its minimum length will stay at the head\n            // of the queue, so the underlying source can keep filling it.\n            return;\n        }\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n        const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n        if (remainderSize > 0) {\n            const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n            ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, pullIntoDescriptor.buffer, end - remainderSize, remainderSize);\n        }\n        pullIntoDescriptor.bytesFilled -= remainderSize;\n        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n        ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n    }\n    function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n        const firstDescriptor = controller._pendingPullIntos.peek();\n        ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n        const state = controller._controlledReadableByteStream._state;\n        if (state === 'closed') {\n            ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\n        }\n        else {\n            ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n        }\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n    function ReadableByteStreamControllerShiftPendingPullInto(controller) {\n        const descriptor = controller._pendingPullIntos.shift();\n        return descriptor;\n    }\n    function ReadableByteStreamControllerShouldCallPull(controller) {\n        const stream = controller._controlledReadableByteStream;\n        if (stream._state !== 'readable') {\n            return false;\n        }\n        if (controller._closeRequested) {\n            return false;\n        }\n        if (!controller._started) {\n            return false;\n        }\n        if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n            return true;\n        }\n        if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n            return true;\n        }\n        const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n        if (desiredSize > 0) {\n            return true;\n        }\n        return false;\n    }\n    function ReadableByteStreamControllerClearAlgorithms(controller) {\n        controller._pullAlgorithm = undefined;\n        controller._cancelAlgorithm = undefined;\n    }\n    // A client of ReadableByteStreamController may use these functions directly to bypass state check.\n    function ReadableByteStreamControllerClose(controller) {\n        const stream = controller._controlledReadableByteStream;\n        if (controller._closeRequested || stream._state !== 'readable') {\n            return;\n        }\n        if (controller._queueTotalSize > 0) {\n            controller._closeRequested = true;\n            return;\n        }\n        if (controller._pendingPullIntos.length > 0) {\n            const firstPendingPullInto = controller._pendingPullIntos.peek();\n            if (firstPendingPullInto.bytesFilled % firstPendingPullInto.elementSize !== 0) {\n                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n                ReadableByteStreamControllerError(controller, e);\n                throw e;\n            }\n        }\n        ReadableByteStreamControllerClearAlgorithms(controller);\n        ReadableStreamClose(stream);\n    }\n    function ReadableByteStreamControllerEnqueue(controller, chunk) {\n        const stream = controller._controlledReadableByteStream;\n        if (controller._closeRequested || stream._state !== 'readable') {\n            return;\n        }\n        const { buffer, byteOffset, byteLength } = chunk;\n        if (IsDetachedBuffer(buffer)) {\n            throw new TypeError('chunk\\'s buffer is detached and so cannot be enqueued');\n        }\n        const transferredBuffer = TransferArrayBuffer(buffer);\n        if (controller._pendingPullIntos.length > 0) {\n            const firstPendingPullInto = controller._pendingPullIntos.peek();\n            if (IsDetachedBuffer(firstPendingPullInto.buffer)) {\n                throw new TypeError('The BYOB request\\'s buffer has been detached and so cannot be filled with an enqueued chunk');\n            }\n            ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n            firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n            if (firstPendingPullInto.readerType === 'none') {\n                ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, firstPendingPullInto);\n            }\n        }\n        if (ReadableStreamHasDefaultReader(stream)) {\n            ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller);\n            if (ReadableStreamGetNumReadRequests(stream) === 0) {\n                ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n            }\n            else {\n                if (controller._pendingPullIntos.length > 0) {\n                    ReadableByteStreamControllerShiftPendingPullInto(controller);\n                }\n                const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n                ReadableStreamFulfillReadRequest(stream, transferredView, false);\n            }\n        }\n        else if (ReadableStreamHasBYOBReader(stream)) {\n            // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n        }\n        else {\n            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n        }\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n    function ReadableByteStreamControllerError(controller, e) {\n        const stream = controller._controlledReadableByteStream;\n        if (stream._state !== 'readable') {\n            return;\n        }\n        ReadableByteStreamControllerClearPendingPullIntos(controller);\n        ResetQueue(controller);\n        ReadableByteStreamControllerClearAlgorithms(controller);\n        ReadableStreamError(stream, e);\n    }\n    function ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest) {\n        const entry = controller._queue.shift();\n        controller._queueTotalSize -= entry.byteLength;\n        ReadableByteStreamControllerHandleQueueDrain(controller);\n        const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n        readRequest._chunkSteps(view);\n    }\n    function ReadableByteStreamControllerGetBYOBRequest(controller) {\n        if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n            const firstDescriptor = controller._pendingPullIntos.peek();\n            const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n            const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n            SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n            controller._byobRequest = byobRequest;\n        }\n        return controller._byobRequest;\n    }\n    function ReadableByteStreamControllerGetDesiredSize(controller) {\n        const state = controller._controlledReadableByteStream._state;\n        if (state === 'errored') {\n            return null;\n        }\n        if (state === 'closed') {\n            return 0;\n        }\n        return controller._strategyHWM - controller._queueTotalSize;\n    }\n    function ReadableByteStreamControllerRespond(controller, bytesWritten) {\n        const firstDescriptor = controller._pendingPullIntos.peek();\n        const state = controller._controlledReadableByteStream._state;\n        if (state === 'closed') {\n            if (bytesWritten !== 0) {\n                throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n            }\n        }\n        else {\n            if (bytesWritten === 0) {\n                throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n            }\n            if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n                throw new RangeError('bytesWritten out of range');\n            }\n        }\n        firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n        ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n    }\n    function ReadableByteStreamControllerRespondWithNewView(controller, view) {\n        const firstDescriptor = controller._pendingPullIntos.peek();\n        const state = controller._controlledReadableByteStream._state;\n        if (state === 'closed') {\n            if (view.byteLength !== 0) {\n                throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n            }\n        }\n        else {\n            if (view.byteLength === 0) {\n                throw new TypeError('The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream');\n            }\n        }\n        if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n            throw new RangeError('The region specified by view does not match byobRequest');\n        }\n        if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n            throw new RangeError('The buffer of view has different capacity than byobRequest');\n        }\n        if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n            throw new RangeError('The region specified by view is larger than byobRequest');\n        }\n        const viewByteLength = view.byteLength;\n        firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n        ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n    }\n    function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\n        controller._controlledReadableByteStream = stream;\n        controller._pullAgain = false;\n        controller._pulling = false;\n        controller._byobRequest = null;\n        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n        controller._queue = controller._queueTotalSize = undefined;\n        ResetQueue(controller);\n        controller._closeRequested = false;\n        controller._started = false;\n        controller._strategyHWM = highWaterMark;\n        controller._pullAlgorithm = pullAlgorithm;\n        controller._cancelAlgorithm = cancelAlgorithm;\n        controller._autoAllocateChunkSize = autoAllocateChunkSize;\n        controller._pendingPullIntos = new SimpleQueue();\n        stream._readableStreamController = controller;\n        const startResult = startAlgorithm();\n        uponPromise(promiseResolvedWith(startResult), () => {\n            controller._started = true;\n            ReadableByteStreamControllerCallPullIfNeeded(controller);\n            return null;\n        }, r => {\n            ReadableByteStreamControllerError(controller, r);\n            return null;\n        });\n    }\n    function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n        const controller = Object.create(ReadableByteStreamController.prototype);\n        let startAlgorithm;\n        let pullAlgorithm;\n        let cancelAlgorithm;\n        if (underlyingByteSource.start !== undefined) {\n            startAlgorithm = () => underlyingByteSource.start(controller);\n        }\n        else {\n            startAlgorithm = () => undefined;\n        }\n        if (underlyingByteSource.pull !== undefined) {\n            pullAlgorithm = () => underlyingByteSource.pull(controller);\n        }\n        else {\n            pullAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        if (underlyingByteSource.cancel !== undefined) {\n            cancelAlgorithm = reason => underlyingByteSource.cancel(reason);\n        }\n        else {\n            cancelAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n        if (autoAllocateChunkSize === 0) {\n            throw new TypeError('autoAllocateChunkSize must be greater than 0');\n        }\n        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\n    }\n    function SetUpReadableStreamBYOBRequest(request, controller, view) {\n        request._associatedReadableByteStreamController = controller;\n        request._view = view;\n    }\n    // Helper functions for the ReadableStreamBYOBRequest.\n    function byobRequestBrandCheckException(name) {\n        return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n    }\n    // Helper functions for the ReadableByteStreamController.\n    function byteStreamControllerBrandCheckException(name) {\n        return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n    }\n\n    function convertReaderOptions(options, context) {\n        assertDictionary(options, context);\n        const mode = options === null || options === void 0 ? void 0 : options.mode;\n        return {\n            mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n        };\n    }\n    function convertReadableStreamReaderMode(mode, context) {\n        mode = `${mode}`;\n        if (mode !== 'byob') {\n            throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n        }\n        return mode;\n    }\n    function convertByobReadOptions(options, context) {\n        var _a;\n        assertDictionary(options, context);\n        const min = (_a = options === null || options === void 0 ? void 0 : options.min) !== null && _a !== void 0 ? _a : 1;\n        return {\n            min: convertUnsignedLongLongWithEnforceRange(min, `${context} has member 'min' that`)\n        };\n    }\n\n    // Abstract operations for the ReadableStream.\n    function AcquireReadableStreamBYOBReader(stream) {\n        return new ReadableStreamBYOBReader(stream);\n    }\n    // ReadableStream API exposed for controllers.\n    function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\n        stream._reader._readIntoRequests.push(readIntoRequest);\n    }\n    function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n        const reader = stream._reader;\n        const readIntoRequest = reader._readIntoRequests.shift();\n        if (done) {\n            readIntoRequest._closeSteps(chunk);\n        }\n        else {\n            readIntoRequest._chunkSteps(chunk);\n        }\n    }\n    function ReadableStreamGetNumReadIntoRequests(stream) {\n        return stream._reader._readIntoRequests.length;\n    }\n    function ReadableStreamHasBYOBReader(stream) {\n        const reader = stream._reader;\n        if (reader === undefined) {\n            return false;\n        }\n        if (!IsReadableStreamBYOBReader(reader)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * A BYOB reader vended by a {@link ReadableStream}.\n     *\n     * @public\n     */\n    class ReadableStreamBYOBReader {\n        constructor(stream) {\n            assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n            assertReadableStream(stream, 'First parameter');\n            if (IsReadableStreamLocked(stream)) {\n                throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n            }\n            if (!IsReadableByteStreamController(stream._readableStreamController)) {\n                throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n                    'source');\n            }\n            ReadableStreamReaderGenericInitialize(this, stream);\n            this._readIntoRequests = new SimpleQueue();\n        }\n        /**\n         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n         * the reader's lock is released before the stream finishes closing.\n         */\n        get closed() {\n            if (!IsReadableStreamBYOBReader(this)) {\n                return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n            }\n            return this._closedPromise;\n        }\n        /**\n         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n         */\n        cancel(reason = undefined) {\n            if (!IsReadableStreamBYOBReader(this)) {\n                return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n            }\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('cancel'));\n            }\n            return ReadableStreamReaderGenericCancel(this, reason);\n        }\n        read(view, rawOptions = {}) {\n            if (!IsReadableStreamBYOBReader(this)) {\n                return promiseRejectedWith(byobReaderBrandCheckException('read'));\n            }\n            if (!ArrayBuffer.isView(view)) {\n                return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n            }\n            if (view.byteLength === 0) {\n                return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n            }\n            if (view.buffer.byteLength === 0) {\n                return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n            }\n            if (IsDetachedBuffer(view.buffer)) {\n                return promiseRejectedWith(new TypeError('view\\'s buffer has been detached'));\n            }\n            let options;\n            try {\n                options = convertByobReadOptions(rawOptions, 'options');\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n            const min = options.min;\n            if (min === 0) {\n                return promiseRejectedWith(new TypeError('options.min must be greater than 0'));\n            }\n            if (!isDataView(view)) {\n                if (min > view.length) {\n                    return promiseRejectedWith(new RangeError('options.min must be less than or equal to view\\'s length'));\n                }\n            }\n            else if (min > view.byteLength) {\n                return promiseRejectedWith(new RangeError('options.min must be less than or equal to view\\'s byteLength'));\n            }\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('read from'));\n            }\n            let resolvePromise;\n            let rejectPromise;\n            const promise = newPromise((resolve, reject) => {\n                resolvePromise = resolve;\n                rejectPromise = reject;\n            });\n            const readIntoRequest = {\n                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n                _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),\n                _errorSteps: e => rejectPromise(e)\n            };\n            ReadableStreamBYOBReaderRead(this, view, min, readIntoRequest);\n            return promise;\n        }\n        /**\n         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n         * from now on; otherwise, the reader will appear closed.\n         *\n         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n         * do so will throw a `TypeError` and leave the reader locked to the stream.\n         */\n        releaseLock() {\n            if (!IsReadableStreamBYOBReader(this)) {\n                throw byobReaderBrandCheckException('releaseLock');\n            }\n            if (this._ownerReadableStream === undefined) {\n                return;\n            }\n            ReadableStreamBYOBReaderRelease(this);\n        }\n    }\n    Object.defineProperties(ReadableStreamBYOBReader.prototype, {\n        cancel: { enumerable: true },\n        read: { enumerable: true },\n        releaseLock: { enumerable: true },\n        closed: { enumerable: true }\n    });\n    setFunctionName(ReadableStreamBYOBReader.prototype.cancel, 'cancel');\n    setFunctionName(ReadableStreamBYOBReader.prototype.read, 'read');\n    setFunctionName(ReadableStreamBYOBReader.prototype.releaseLock, 'releaseLock');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamBYOBReader.prototype, Symbol.toStringTag, {\n            value: 'ReadableStreamBYOBReader',\n            configurable: true\n        });\n    }\n    // Abstract operations for the readers.\n    function IsReadableStreamBYOBReader(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n            return false;\n        }\n        return x instanceof ReadableStreamBYOBReader;\n    }\n    function ReadableStreamBYOBReaderRead(reader, view, min, readIntoRequest) {\n        const stream = reader._ownerReadableStream;\n        stream._disturbed = true;\n        if (stream._state === 'errored') {\n            readIntoRequest._errorSteps(stream._storedError);\n        }\n        else {\n            ReadableByteStreamControllerPullInto(stream._readableStreamController, view, min, readIntoRequest);\n        }\n    }\n    function ReadableStreamBYOBReaderRelease(reader) {\n        ReadableStreamReaderGenericRelease(reader);\n        const e = new TypeError('Reader was released');\n        ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e);\n    }\n    function ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e) {\n        const readIntoRequests = reader._readIntoRequests;\n        reader._readIntoRequests = new SimpleQueue();\n        readIntoRequests.forEach(readIntoRequest => {\n            readIntoRequest._errorSteps(e);\n        });\n    }\n    // Helper functions for the ReadableStreamBYOBReader.\n    function byobReaderBrandCheckException(name) {\n        return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n    }\n\n    function ExtractHighWaterMark(strategy, defaultHWM) {\n        const { highWaterMark } = strategy;\n        if (highWaterMark === undefined) {\n            return defaultHWM;\n        }\n        if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n            throw new RangeError('Invalid highWaterMark');\n        }\n        return highWaterMark;\n    }\n    function ExtractSizeAlgorithm(strategy) {\n        const { size } = strategy;\n        if (!size) {\n            return () => 1;\n        }\n        return size;\n    }\n\n    function convertQueuingStrategy(init, context) {\n        assertDictionary(init, context);\n        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n        const size = init === null || init === void 0 ? void 0 : init.size;\n        return {\n            highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n            size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n        };\n    }\n    function convertQueuingStrategySize(fn, context) {\n        assertFunction(fn, context);\n        return chunk => convertUnrestrictedDouble(fn(chunk));\n    }\n\n    function convertUnderlyingSink(original, context) {\n        assertDictionary(original, context);\n        const abort = original === null || original === void 0 ? void 0 : original.abort;\n        const close = original === null || original === void 0 ? void 0 : original.close;\n        const start = original === null || original === void 0 ? void 0 : original.start;\n        const type = original === null || original === void 0 ? void 0 : original.type;\n        const write = original === null || original === void 0 ? void 0 : original.write;\n        return {\n            abort: abort === undefined ?\n                undefined :\n                convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),\n            close: close === undefined ?\n                undefined :\n                convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),\n            start: start === undefined ?\n                undefined :\n                convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),\n            write: write === undefined ?\n                undefined :\n                convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),\n            type\n        };\n    }\n    function convertUnderlyingSinkAbortCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (reason) => promiseCall(fn, original, [reason]);\n    }\n    function convertUnderlyingSinkCloseCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return () => promiseCall(fn, original, []);\n    }\n    function convertUnderlyingSinkStartCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (controller) => reflectCall(fn, original, [controller]);\n    }\n    function convertUnderlyingSinkWriteCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\n    }\n\n    function assertWritableStream(x, context) {\n        if (!IsWritableStream(x)) {\n            throw new TypeError(`${context} is not a WritableStream.`);\n        }\n    }\n\n    function isAbortSignal(value) {\n        if (typeof value !== 'object' || value === null) {\n            return false;\n        }\n        try {\n            return typeof value.aborted === 'boolean';\n        }\n        catch (_a) {\n            // AbortSignal.prototype.aborted throws if its brand check fails\n            return false;\n        }\n    }\n    const supportsAbortController = typeof AbortController === 'function';\n    /**\n     * Construct a new AbortController, if supported by the platform.\n     *\n     * @internal\n     */\n    function createAbortController() {\n        if (supportsAbortController) {\n            return new AbortController();\n        }\n        return undefined;\n    }\n\n    /**\n     * A writable stream represents a destination for data, into which you can write.\n     *\n     * @public\n     */\n    class WritableStream {\n        constructor(rawUnderlyingSink = {}, rawStrategy = {}) {\n            if (rawUnderlyingSink === undefined) {\n                rawUnderlyingSink = null;\n            }\n            else {\n                assertObject(rawUnderlyingSink, 'First parameter');\n            }\n            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n            const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n            InitializeWritableStream(this);\n            const type = underlyingSink.type;\n            if (type !== undefined) {\n                throw new RangeError('Invalid type is specified');\n            }\n            const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n            const highWaterMark = ExtractHighWaterMark(strategy, 1);\n            SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n        }\n        /**\n         * Returns whether or not the writable stream is locked to a writer.\n         */\n        get locked() {\n            if (!IsWritableStream(this)) {\n                throw streamBrandCheckException$2('locked');\n            }\n            return IsWritableStreamLocked(this);\n        }\n        /**\n         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n         * mechanism of the underlying sink.\n         *\n         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n         * the stream) if the stream is currently locked.\n         */\n        abort(reason = undefined) {\n            if (!IsWritableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$2('abort'));\n            }\n            if (IsWritableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n            }\n            return WritableStreamAbort(this, reason);\n        }\n        /**\n         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n         * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n         *\n         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n         */\n        close() {\n            if (!IsWritableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$2('close'));\n            }\n            if (IsWritableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n            }\n            if (WritableStreamCloseQueuedOrInFlight(this)) {\n                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n            }\n            return WritableStreamClose(this);\n        }\n        /**\n         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n         * is locked, no other writer can be acquired until this one is released.\n         *\n         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n         * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n         */\n        getWriter() {\n            if (!IsWritableStream(this)) {\n                throw streamBrandCheckException$2('getWriter');\n            }\n            return AcquireWritableStreamDefaultWriter(this);\n        }\n    }\n    Object.defineProperties(WritableStream.prototype, {\n        abort: { enumerable: true },\n        close: { enumerable: true },\n        getWriter: { enumerable: true },\n        locked: { enumerable: true }\n    });\n    setFunctionName(WritableStream.prototype.abort, 'abort');\n    setFunctionName(WritableStream.prototype.close, 'close');\n    setFunctionName(WritableStream.prototype.getWriter, 'getWriter');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {\n            value: 'WritableStream',\n            configurable: true\n        });\n    }\n    // Abstract operations for the WritableStream.\n    function AcquireWritableStreamDefaultWriter(stream) {\n        return new WritableStreamDefaultWriter(stream);\n    }\n    // Throws if and only if startAlgorithm throws.\n    function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\n        const stream = Object.create(WritableStream.prototype);\n        InitializeWritableStream(stream);\n        const controller = Object.create(WritableStreamDefaultController.prototype);\n        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n        return stream;\n    }\n    function InitializeWritableStream(stream) {\n        stream._state = 'writable';\n        // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n        // 'erroring' or 'errored'. May be set to an undefined value.\n        stream._storedError = undefined;\n        stream._writer = undefined;\n        // Initialize to undefined first because the constructor of the controller checks this\n        // variable to validate the caller.\n        stream._writableStreamController = undefined;\n        // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n        // producer without waiting for the queued writes to finish.\n        stream._writeRequests = new SimpleQueue();\n        // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n        // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n        stream._inFlightWriteRequest = undefined;\n        // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n        // has been detached.\n        stream._closeRequest = undefined;\n        // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n        // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n        stream._inFlightCloseRequest = undefined;\n        // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n        stream._pendingAbortRequest = undefined;\n        // The backpressure signal set by the controller.\n        stream._backpressure = false;\n    }\n    function IsWritableStream(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n            return false;\n        }\n        return x instanceof WritableStream;\n    }\n    function IsWritableStreamLocked(stream) {\n        if (stream._writer === undefined) {\n            return false;\n        }\n        return true;\n    }\n    function WritableStreamAbort(stream, reason) {\n        var _a;\n        if (stream._state === 'closed' || stream._state === 'errored') {\n            return promiseResolvedWith(undefined);\n        }\n        stream._writableStreamController._abortReason = reason;\n        (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort(reason);\n        // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n        // but it doesn't know that signaling abort runs author code that might have changed the state.\n        // Widen the type again by casting to WritableStreamState.\n        const state = stream._state;\n        if (state === 'closed' || state === 'errored') {\n            return promiseResolvedWith(undefined);\n        }\n        if (stream._pendingAbortRequest !== undefined) {\n            return stream._pendingAbortRequest._promise;\n        }\n        let wasAlreadyErroring = false;\n        if (state === 'erroring') {\n            wasAlreadyErroring = true;\n            // reason will not be used, so don't keep a reference to it.\n            reason = undefined;\n        }\n        const promise = newPromise((resolve, reject) => {\n            stream._pendingAbortRequest = {\n                _promise: undefined,\n                _resolve: resolve,\n                _reject: reject,\n                _reason: reason,\n                _wasAlreadyErroring: wasAlreadyErroring\n            };\n        });\n        stream._pendingAbortRequest._promise = promise;\n        if (!wasAlreadyErroring) {\n            WritableStreamStartErroring(stream, reason);\n        }\n        return promise;\n    }\n    function WritableStreamClose(stream) {\n        const state = stream._state;\n        if (state === 'closed' || state === 'errored') {\n            return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));\n        }\n        const promise = newPromise((resolve, reject) => {\n            const closeRequest = {\n                _resolve: resolve,\n                _reject: reject\n            };\n            stream._closeRequest = closeRequest;\n        });\n        const writer = stream._writer;\n        if (writer !== undefined && stream._backpressure && state === 'writable') {\n            defaultWriterReadyPromiseResolve(writer);\n        }\n        WritableStreamDefaultControllerClose(stream._writableStreamController);\n        return promise;\n    }\n    // WritableStream API exposed for controllers.\n    function WritableStreamAddWriteRequest(stream) {\n        const promise = newPromise((resolve, reject) => {\n            const writeRequest = {\n                _resolve: resolve,\n                _reject: reject\n            };\n            stream._writeRequests.push(writeRequest);\n        });\n        return promise;\n    }\n    function WritableStreamDealWithRejection(stream, error) {\n        const state = stream._state;\n        if (state === 'writable') {\n            WritableStreamStartErroring(stream, error);\n            return;\n        }\n        WritableStreamFinishErroring(stream);\n    }\n    function WritableStreamStartErroring(stream, reason) {\n        const controller = stream._writableStreamController;\n        stream._state = 'erroring';\n        stream._storedError = reason;\n        const writer = stream._writer;\n        if (writer !== undefined) {\n            WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n        }\n        if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n            WritableStreamFinishErroring(stream);\n        }\n    }\n    function WritableStreamFinishErroring(stream) {\n        stream._state = 'errored';\n        stream._writableStreamController[ErrorSteps]();\n        const storedError = stream._storedError;\n        stream._writeRequests.forEach(writeRequest => {\n            writeRequest._reject(storedError);\n        });\n        stream._writeRequests = new SimpleQueue();\n        if (stream._pendingAbortRequest === undefined) {\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n            return;\n        }\n        const abortRequest = stream._pendingAbortRequest;\n        stream._pendingAbortRequest = undefined;\n        if (abortRequest._wasAlreadyErroring) {\n            abortRequest._reject(storedError);\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n            return;\n        }\n        const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n        uponPromise(promise, () => {\n            abortRequest._resolve();\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n            return null;\n        }, (reason) => {\n            abortRequest._reject(reason);\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n            return null;\n        });\n    }\n    function WritableStreamFinishInFlightWrite(stream) {\n        stream._inFlightWriteRequest._resolve(undefined);\n        stream._inFlightWriteRequest = undefined;\n    }\n    function WritableStreamFinishInFlightWriteWithError(stream, error) {\n        stream._inFlightWriteRequest._reject(error);\n        stream._inFlightWriteRequest = undefined;\n        WritableStreamDealWithRejection(stream, error);\n    }\n    function WritableStreamFinishInFlightClose(stream) {\n        stream._inFlightCloseRequest._resolve(undefined);\n        stream._inFlightCloseRequest = undefined;\n        const state = stream._state;\n        if (state === 'erroring') {\n            // The error was too late to do anything, so it is ignored.\n            stream._storedError = undefined;\n            if (stream._pendingAbortRequest !== undefined) {\n                stream._pendingAbortRequest._resolve();\n                stream._pendingAbortRequest = undefined;\n            }\n        }\n        stream._state = 'closed';\n        const writer = stream._writer;\n        if (writer !== undefined) {\n            defaultWriterClosedPromiseResolve(writer);\n        }\n    }\n    function WritableStreamFinishInFlightCloseWithError(stream, error) {\n        stream._inFlightCloseRequest._reject(error);\n        stream._inFlightCloseRequest = undefined;\n        // Never execute sink abort() after sink close().\n        if (stream._pendingAbortRequest !== undefined) {\n            stream._pendingAbortRequest._reject(error);\n            stream._pendingAbortRequest = undefined;\n        }\n        WritableStreamDealWithRejection(stream, error);\n    }\n    // TODO(ricea): Fix alphabetical order.\n    function WritableStreamCloseQueuedOrInFlight(stream) {\n        if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n            return false;\n        }\n        return true;\n    }\n    function WritableStreamHasOperationMarkedInFlight(stream) {\n        if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n            return false;\n        }\n        return true;\n    }\n    function WritableStreamMarkCloseRequestInFlight(stream) {\n        stream._inFlightCloseRequest = stream._closeRequest;\n        stream._closeRequest = undefined;\n    }\n    function WritableStreamMarkFirstWriteRequestInFlight(stream) {\n        stream._inFlightWriteRequest = stream._writeRequests.shift();\n    }\n    function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n        if (stream._closeRequest !== undefined) {\n            stream._closeRequest._reject(stream._storedError);\n            stream._closeRequest = undefined;\n        }\n        const writer = stream._writer;\n        if (writer !== undefined) {\n            defaultWriterClosedPromiseReject(writer, stream._storedError);\n        }\n    }\n    function WritableStreamUpdateBackpressure(stream, backpressure) {\n        const writer = stream._writer;\n        if (writer !== undefined && backpressure !== stream._backpressure) {\n            if (backpressure) {\n                defaultWriterReadyPromiseReset(writer);\n            }\n            else {\n                defaultWriterReadyPromiseResolve(writer);\n            }\n        }\n        stream._backpressure = backpressure;\n    }\n    /**\n     * A default writer vended by a {@link WritableStream}.\n     *\n     * @public\n     */\n    class WritableStreamDefaultWriter {\n        constructor(stream) {\n            assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n            assertWritableStream(stream, 'First parameter');\n            if (IsWritableStreamLocked(stream)) {\n                throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n            }\n            this._ownerWritableStream = stream;\n            stream._writer = this;\n            const state = stream._state;\n            if (state === 'writable') {\n                if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n                    defaultWriterReadyPromiseInitialize(this);\n                }\n                else {\n                    defaultWriterReadyPromiseInitializeAsResolved(this);\n                }\n                defaultWriterClosedPromiseInitialize(this);\n            }\n            else if (state === 'erroring') {\n                defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n                defaultWriterClosedPromiseInitialize(this);\n            }\n            else if (state === 'closed') {\n                defaultWriterReadyPromiseInitializeAsResolved(this);\n                defaultWriterClosedPromiseInitializeAsResolved(this);\n            }\n            else {\n                const storedError = stream._storedError;\n                defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n                defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n            }\n        }\n        /**\n         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n         * the writer’s lock is released before the stream finishes closing.\n         */\n        get closed() {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n            }\n            return this._closedPromise;\n        }\n        /**\n         * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n         * A producer can use this information to determine the right amount of data to write.\n         *\n         * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n         * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n         * the writer’s lock is released.\n         */\n        get desiredSize() {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                throw defaultWriterBrandCheckException('desiredSize');\n            }\n            if (this._ownerWritableStream === undefined) {\n                throw defaultWriterLockException('desiredSize');\n            }\n            return WritableStreamDefaultWriterGetDesiredSize(this);\n        }\n        /**\n         * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n         * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n         * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n         *\n         * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n         * rejected.\n         */\n        get ready() {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n            }\n            return this._readyPromise;\n        }\n        /**\n         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n         */\n        abort(reason = undefined) {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n            }\n            if (this._ownerWritableStream === undefined) {\n                return promiseRejectedWith(defaultWriterLockException('abort'));\n            }\n            return WritableStreamDefaultWriterAbort(this, reason);\n        }\n        /**\n         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n         */\n        close() {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n            }\n            const stream = this._ownerWritableStream;\n            if (stream === undefined) {\n                return promiseRejectedWith(defaultWriterLockException('close'));\n            }\n            if (WritableStreamCloseQueuedOrInFlight(stream)) {\n                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n            }\n            return WritableStreamDefaultWriterClose(this);\n        }\n        /**\n         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n         * now on; otherwise, the writer will appear closed.\n         *\n         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n         * other producers from writing in an interleaved manner.\n         */\n        releaseLock() {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                throw defaultWriterBrandCheckException('releaseLock');\n            }\n            const stream = this._ownerWritableStream;\n            if (stream === undefined) {\n                return;\n            }\n            WritableStreamDefaultWriterRelease(this);\n        }\n        write(chunk = undefined) {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n            }\n            if (this._ownerWritableStream === undefined) {\n                return promiseRejectedWith(defaultWriterLockException('write to'));\n            }\n            return WritableStreamDefaultWriterWrite(this, chunk);\n        }\n    }\n    Object.defineProperties(WritableStreamDefaultWriter.prototype, {\n        abort: { enumerable: true },\n        close: { enumerable: true },\n        releaseLock: { enumerable: true },\n        write: { enumerable: true },\n        closed: { enumerable: true },\n        desiredSize: { enumerable: true },\n        ready: { enumerable: true }\n    });\n    setFunctionName(WritableStreamDefaultWriter.prototype.abort, 'abort');\n    setFunctionName(WritableStreamDefaultWriter.prototype.close, 'close');\n    setFunctionName(WritableStreamDefaultWriter.prototype.releaseLock, 'releaseLock');\n    setFunctionName(WritableStreamDefaultWriter.prototype.write, 'write');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(WritableStreamDefaultWriter.prototype, Symbol.toStringTag, {\n            value: 'WritableStreamDefaultWriter',\n            configurable: true\n        });\n    }\n    // Abstract operations for the WritableStreamDefaultWriter.\n    function IsWritableStreamDefaultWriter(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n            return false;\n        }\n        return x instanceof WritableStreamDefaultWriter;\n    }\n    // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n    function WritableStreamDefaultWriterAbort(writer, reason) {\n        const stream = writer._ownerWritableStream;\n        return WritableStreamAbort(stream, reason);\n    }\n    function WritableStreamDefaultWriterClose(writer) {\n        const stream = writer._ownerWritableStream;\n        return WritableStreamClose(stream);\n    }\n    function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n        const stream = writer._ownerWritableStream;\n        const state = stream._state;\n        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n            return promiseResolvedWith(undefined);\n        }\n        if (state === 'errored') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        return WritableStreamDefaultWriterClose(writer);\n    }\n    function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n        if (writer._closedPromiseState === 'pending') {\n            defaultWriterClosedPromiseReject(writer, error);\n        }\n        else {\n            defaultWriterClosedPromiseResetToRejected(writer, error);\n        }\n    }\n    function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n        if (writer._readyPromiseState === 'pending') {\n            defaultWriterReadyPromiseReject(writer, error);\n        }\n        else {\n            defaultWriterReadyPromiseResetToRejected(writer, error);\n        }\n    }\n    function WritableStreamDefaultWriterGetDesiredSize(writer) {\n        const stream = writer._ownerWritableStream;\n        const state = stream._state;\n        if (state === 'errored' || state === 'erroring') {\n            return null;\n        }\n        if (state === 'closed') {\n            return 0;\n        }\n        return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n    }\n    function WritableStreamDefaultWriterRelease(writer) {\n        const stream = writer._ownerWritableStream;\n        const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);\n        WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n        // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n        // rejected until afterwards. This means that simply testing state will not work.\n        WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n        stream._writer = undefined;\n        writer._ownerWritableStream = undefined;\n    }\n    function WritableStreamDefaultWriterWrite(writer, chunk) {\n        const stream = writer._ownerWritableStream;\n        const controller = stream._writableStreamController;\n        const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n        if (stream !== writer._ownerWritableStream) {\n            return promiseRejectedWith(defaultWriterLockException('write to'));\n        }\n        const state = stream._state;\n        if (state === 'errored') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n            return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n        }\n        if (state === 'erroring') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        const promise = WritableStreamAddWriteRequest(stream);\n        WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n        return promise;\n    }\n    const closeSentinel = {};\n    /**\n     * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n     *\n     * @public\n     */\n    class WritableStreamDefaultController {\n        constructor() {\n            throw new TypeError('Illegal constructor');\n        }\n        /**\n         * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n         *\n         * @deprecated\n         *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n         *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n         */\n        get abortReason() {\n            if (!IsWritableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$2('abortReason');\n            }\n            return this._abortReason;\n        }\n        /**\n         * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n         */\n        get signal() {\n            if (!IsWritableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$2('signal');\n            }\n            if (this._abortController === undefined) {\n                // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n                // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n                // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n                throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n            }\n            return this._abortController.signal;\n        }\n        /**\n         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n         *\n         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n         * normal lifecycle of interactions with the underlying sink.\n         */\n        error(e = undefined) {\n            if (!IsWritableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$2('error');\n            }\n            const state = this._controlledWritableStream._state;\n            if (state !== 'writable') {\n                // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n                // just treat it as a no-op.\n                return;\n            }\n            WritableStreamDefaultControllerError(this, e);\n        }\n        /** @internal */\n        [AbortSteps](reason) {\n            const result = this._abortAlgorithm(reason);\n            WritableStreamDefaultControllerClearAlgorithms(this);\n            return result;\n        }\n        /** @internal */\n        [ErrorSteps]() {\n            ResetQueue(this);\n        }\n    }\n    Object.defineProperties(WritableStreamDefaultController.prototype, {\n        abortReason: { enumerable: true },\n        signal: { enumerable: true },\n        error: { enumerable: true }\n    });\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(WritableStreamDefaultController.prototype, Symbol.toStringTag, {\n            value: 'WritableStreamDefaultController',\n            configurable: true\n        });\n    }\n    // Abstract operations implementing interface required by the WritableStream.\n    function IsWritableStreamDefaultController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n            return false;\n        }\n        return x instanceof WritableStreamDefaultController;\n    }\n    function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n        controller._controlledWritableStream = stream;\n        stream._writableStreamController = controller;\n        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n        controller._queue = undefined;\n        controller._queueTotalSize = undefined;\n        ResetQueue(controller);\n        controller._abortReason = undefined;\n        controller._abortController = createAbortController();\n        controller._started = false;\n        controller._strategySizeAlgorithm = sizeAlgorithm;\n        controller._strategyHWM = highWaterMark;\n        controller._writeAlgorithm = writeAlgorithm;\n        controller._closeAlgorithm = closeAlgorithm;\n        controller._abortAlgorithm = abortAlgorithm;\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n        const startResult = startAlgorithm();\n        const startPromise = promiseResolvedWith(startResult);\n        uponPromise(startPromise, () => {\n            controller._started = true;\n            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n            return null;\n        }, r => {\n            controller._started = true;\n            WritableStreamDealWithRejection(stream, r);\n            return null;\n        });\n    }\n    function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n        const controller = Object.create(WritableStreamDefaultController.prototype);\n        let startAlgorithm;\n        let writeAlgorithm;\n        let closeAlgorithm;\n        let abortAlgorithm;\n        if (underlyingSink.start !== undefined) {\n            startAlgorithm = () => underlyingSink.start(controller);\n        }\n        else {\n            startAlgorithm = () => undefined;\n        }\n        if (underlyingSink.write !== undefined) {\n            writeAlgorithm = chunk => underlyingSink.write(chunk, controller);\n        }\n        else {\n            writeAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        if (underlyingSink.close !== undefined) {\n            closeAlgorithm = () => underlyingSink.close();\n        }\n        else {\n            closeAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        if (underlyingSink.abort !== undefined) {\n            abortAlgorithm = reason => underlyingSink.abort(reason);\n        }\n        else {\n            abortAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n    }\n    // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\n    function WritableStreamDefaultControllerClearAlgorithms(controller) {\n        controller._writeAlgorithm = undefined;\n        controller._closeAlgorithm = undefined;\n        controller._abortAlgorithm = undefined;\n        controller._strategySizeAlgorithm = undefined;\n    }\n    function WritableStreamDefaultControllerClose(controller) {\n        EnqueueValueWithSize(controller, closeSentinel, 0);\n        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }\n    function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n        try {\n            return controller._strategySizeAlgorithm(chunk);\n        }\n        catch (chunkSizeE) {\n            WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n            return 1;\n        }\n    }\n    function WritableStreamDefaultControllerGetDesiredSize(controller) {\n        return controller._strategyHWM - controller._queueTotalSize;\n    }\n    function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n        try {\n            EnqueueValueWithSize(controller, chunk, chunkSize);\n        }\n        catch (enqueueE) {\n            WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n            return;\n        }\n        const stream = controller._controlledWritableStream;\n        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n            const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n            WritableStreamUpdateBackpressure(stream, backpressure);\n        }\n        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }\n    // Abstract operations for the WritableStreamDefaultController.\n    function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n        const stream = controller._controlledWritableStream;\n        if (!controller._started) {\n            return;\n        }\n        if (stream._inFlightWriteRequest !== undefined) {\n            return;\n        }\n        const state = stream._state;\n        if (state === 'erroring') {\n            WritableStreamFinishErroring(stream);\n            return;\n        }\n        if (controller._queue.length === 0) {\n            return;\n        }\n        const value = PeekQueueValue(controller);\n        if (value === closeSentinel) {\n            WritableStreamDefaultControllerProcessClose(controller);\n        }\n        else {\n            WritableStreamDefaultControllerProcessWrite(controller, value);\n        }\n    }\n    function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n        if (controller._controlledWritableStream._state === 'writable') {\n            WritableStreamDefaultControllerError(controller, error);\n        }\n    }\n    function WritableStreamDefaultControllerProcessClose(controller) {\n        const stream = controller._controlledWritableStream;\n        WritableStreamMarkCloseRequestInFlight(stream);\n        DequeueValue(controller);\n        const sinkClosePromise = controller._closeAlgorithm();\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n        uponPromise(sinkClosePromise, () => {\n            WritableStreamFinishInFlightClose(stream);\n            return null;\n        }, reason => {\n            WritableStreamFinishInFlightCloseWithError(stream, reason);\n            return null;\n        });\n    }\n    function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n        const stream = controller._controlledWritableStream;\n        WritableStreamMarkFirstWriteRequestInFlight(stream);\n        const sinkWritePromise = controller._writeAlgorithm(chunk);\n        uponPromise(sinkWritePromise, () => {\n            WritableStreamFinishInFlightWrite(stream);\n            const state = stream._state;\n            DequeueValue(controller);\n            if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n                const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n                WritableStreamUpdateBackpressure(stream, backpressure);\n            }\n            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n            return null;\n        }, reason => {\n            if (stream._state === 'writable') {\n                WritableStreamDefaultControllerClearAlgorithms(controller);\n            }\n            WritableStreamFinishInFlightWriteWithError(stream, reason);\n            return null;\n        });\n    }\n    function WritableStreamDefaultControllerGetBackpressure(controller) {\n        const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n        return desiredSize <= 0;\n    }\n    // A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n    function WritableStreamDefaultControllerError(controller, error) {\n        const stream = controller._controlledWritableStream;\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n        WritableStreamStartErroring(stream, error);\n    }\n    // Helper functions for the WritableStream.\n    function streamBrandCheckException$2(name) {\n        return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n    }\n    // Helper functions for the WritableStreamDefaultController.\n    function defaultControllerBrandCheckException$2(name) {\n        return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n    }\n    // Helper functions for the WritableStreamDefaultWriter.\n    function defaultWriterBrandCheckException(name) {\n        return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n    }\n    function defaultWriterLockException(name) {\n        return new TypeError('Cannot ' + name + ' a stream using a released writer');\n    }\n    function defaultWriterClosedPromiseInitialize(writer) {\n        writer._closedPromise = newPromise((resolve, reject) => {\n            writer._closedPromise_resolve = resolve;\n            writer._closedPromise_reject = reject;\n            writer._closedPromiseState = 'pending';\n        });\n    }\n    function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n        defaultWriterClosedPromiseInitialize(writer);\n        defaultWriterClosedPromiseReject(writer, reason);\n    }\n    function defaultWriterClosedPromiseInitializeAsResolved(writer) {\n        defaultWriterClosedPromiseInitialize(writer);\n        defaultWriterClosedPromiseResolve(writer);\n    }\n    function defaultWriterClosedPromiseReject(writer, reason) {\n        if (writer._closedPromise_reject === undefined) {\n            return;\n        }\n        setPromiseIsHandledToTrue(writer._closedPromise);\n        writer._closedPromise_reject(reason);\n        writer._closedPromise_resolve = undefined;\n        writer._closedPromise_reject = undefined;\n        writer._closedPromiseState = 'rejected';\n    }\n    function defaultWriterClosedPromiseResetToRejected(writer, reason) {\n        defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n    }\n    function defaultWriterClosedPromiseResolve(writer) {\n        if (writer._closedPromise_resolve === undefined) {\n            return;\n        }\n        writer._closedPromise_resolve(undefined);\n        writer._closedPromise_resolve = undefined;\n        writer._closedPromise_reject = undefined;\n        writer._closedPromiseState = 'resolved';\n    }\n    function defaultWriterReadyPromiseInitialize(writer) {\n        writer._readyPromise = newPromise((resolve, reject) => {\n            writer._readyPromise_resolve = resolve;\n            writer._readyPromise_reject = reject;\n        });\n        writer._readyPromiseState = 'pending';\n    }\n    function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n        defaultWriterReadyPromiseInitialize(writer);\n        defaultWriterReadyPromiseReject(writer, reason);\n    }\n    function defaultWriterReadyPromiseInitializeAsResolved(writer) {\n        defaultWriterReadyPromiseInitialize(writer);\n        defaultWriterReadyPromiseResolve(writer);\n    }\n    function defaultWriterReadyPromiseReject(writer, reason) {\n        if (writer._readyPromise_reject === undefined) {\n            return;\n        }\n        setPromiseIsHandledToTrue(writer._readyPromise);\n        writer._readyPromise_reject(reason);\n        writer._readyPromise_resolve = undefined;\n        writer._readyPromise_reject = undefined;\n        writer._readyPromiseState = 'rejected';\n    }\n    function defaultWriterReadyPromiseReset(writer) {\n        defaultWriterReadyPromiseInitialize(writer);\n    }\n    function defaultWriterReadyPromiseResetToRejected(writer, reason) {\n        defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n    }\n    function defaultWriterReadyPromiseResolve(writer) {\n        if (writer._readyPromise_resolve === undefined) {\n            return;\n        }\n        writer._readyPromise_resolve(undefined);\n        writer._readyPromise_resolve = undefined;\n        writer._readyPromise_reject = undefined;\n        writer._readyPromiseState = 'fulfilled';\n    }\n\n    /// <reference lib=\"dom\" />\n    function getGlobals() {\n        if (typeof globalThis !== 'undefined') {\n            return globalThis;\n        }\n        else if (typeof self !== 'undefined') {\n            return self;\n        }\n        else if (typeof global !== 'undefined') {\n            return global;\n        }\n        return undefined;\n    }\n    const globals = getGlobals();\n\n    /// <reference types=\"node\" />\n    function isDOMExceptionConstructor(ctor) {\n        if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n            return false;\n        }\n        if (ctor.name !== 'DOMException') {\n            return false;\n        }\n        try {\n            new ctor();\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    /**\n     * Support:\n     * - Web browsers\n     * - Node 18 and higher (https://github.com/nodejs/node/commit/e4b1fb5e6422c1ff151234bb9de792d45dd88d87)\n     */\n    function getFromGlobal() {\n        const ctor = globals === null || globals === void 0 ? void 0 : globals.DOMException;\n        return isDOMExceptionConstructor(ctor) ? ctor : undefined;\n    }\n    /**\n     * Support:\n     * - All platforms\n     */\n    function createPolyfill() {\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        const ctor = function DOMException(message, name) {\n            this.message = message || '';\n            this.name = name || 'Error';\n            if (Error.captureStackTrace) {\n                Error.captureStackTrace(this, this.constructor);\n            }\n        };\n        setFunctionName(ctor, 'DOMException');\n        ctor.prototype = Object.create(Error.prototype);\n        Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });\n        return ctor;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-redeclare\n    const DOMException = getFromGlobal() || createPolyfill();\n\n    function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n        const reader = AcquireReadableStreamDefaultReader(source);\n        const writer = AcquireWritableStreamDefaultWriter(dest);\n        source._disturbed = true;\n        let shuttingDown = false;\n        // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n        let currentWrite = promiseResolvedWith(undefined);\n        return newPromise((resolve, reject) => {\n            let abortAlgorithm;\n            if (signal !== undefined) {\n                abortAlgorithm = () => {\n                    const error = signal.reason !== undefined ? signal.reason : new DOMException('Aborted', 'AbortError');\n                    const actions = [];\n                    if (!preventAbort) {\n                        actions.push(() => {\n                            if (dest._state === 'writable') {\n                                return WritableStreamAbort(dest, error);\n                            }\n                            return promiseResolvedWith(undefined);\n                        });\n                    }\n                    if (!preventCancel) {\n                        actions.push(() => {\n                            if (source._state === 'readable') {\n                                return ReadableStreamCancel(source, error);\n                            }\n                            return promiseResolvedWith(undefined);\n                        });\n                    }\n                    shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\n                };\n                if (signal.aborted) {\n                    abortAlgorithm();\n                    return;\n                }\n                signal.addEventListener('abort', abortAlgorithm);\n            }\n            // Using reader and writer, read all chunks from this and write them to dest\n            // - Backpressure must be enforced\n            // - Shutdown must stop all activity\n            function pipeLoop() {\n                return newPromise((resolveLoop, rejectLoop) => {\n                    function next(done) {\n                        if (done) {\n                            resolveLoop();\n                        }\n                        else {\n                            // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n                            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n                            PerformPromiseThen(pipeStep(), next, rejectLoop);\n                        }\n                    }\n                    next(false);\n                });\n            }\n            function pipeStep() {\n                if (shuttingDown) {\n                    return promiseResolvedWith(true);\n                }\n                return PerformPromiseThen(writer._readyPromise, () => {\n                    return newPromise((resolveRead, rejectRead) => {\n                        ReadableStreamDefaultReaderRead(reader, {\n                            _chunkSteps: chunk => {\n                                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                                resolveRead(false);\n                            },\n                            _closeSteps: () => resolveRead(true),\n                            _errorSteps: rejectRead\n                        });\n                    });\n                });\n            }\n            // Errors must be propagated forward\n            isOrBecomesErrored(source, reader._closedPromise, storedError => {\n                if (!preventAbort) {\n                    shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n                }\n                else {\n                    shutdown(true, storedError);\n                }\n                return null;\n            });\n            // Errors must be propagated backward\n            isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n                if (!preventCancel) {\n                    shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n                }\n                else {\n                    shutdown(true, storedError);\n                }\n                return null;\n            });\n            // Closing must be propagated forward\n            isOrBecomesClosed(source, reader._closedPromise, () => {\n                if (!preventClose) {\n                    shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n                }\n                else {\n                    shutdown();\n                }\n                return null;\n            });\n            // Closing must be propagated backward\n            if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n                const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n                if (!preventCancel) {\n                    shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n                }\n                else {\n                    shutdown(true, destClosed);\n                }\n            }\n            setPromiseIsHandledToTrue(pipeLoop());\n            function waitForWritesToFinish() {\n                // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n                // for that too.\n                const oldCurrentWrite = currentWrite;\n                return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);\n            }\n            function isOrBecomesErrored(stream, promise, action) {\n                if (stream._state === 'errored') {\n                    action(stream._storedError);\n                }\n                else {\n                    uponRejection(promise, action);\n                }\n            }\n            function isOrBecomesClosed(stream, promise, action) {\n                if (stream._state === 'closed') {\n                    action();\n                }\n                else {\n                    uponFulfillment(promise, action);\n                }\n            }\n            function shutdownWithAction(action, originalIsError, originalError) {\n                if (shuttingDown) {\n                    return;\n                }\n                shuttingDown = true;\n                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                    uponFulfillment(waitForWritesToFinish(), doTheRest);\n                }\n                else {\n                    doTheRest();\n                }\n                function doTheRest() {\n                    uponPromise(action(), () => finalize(originalIsError, originalError), newError => finalize(true, newError));\n                    return null;\n                }\n            }\n            function shutdown(isError, error) {\n                if (shuttingDown) {\n                    return;\n                }\n                shuttingDown = true;\n                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                    uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n                }\n                else {\n                    finalize(isError, error);\n                }\n            }\n            function finalize(isError, error) {\n                WritableStreamDefaultWriterRelease(writer);\n                ReadableStreamReaderGenericRelease(reader);\n                if (signal !== undefined) {\n                    signal.removeEventListener('abort', abortAlgorithm);\n                }\n                if (isError) {\n                    reject(error);\n                }\n                else {\n                    resolve(undefined);\n                }\n                return null;\n            }\n        });\n    }\n\n    /**\n     * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n     *\n     * @public\n     */\n    class ReadableStreamDefaultController {\n        constructor() {\n            throw new TypeError('Illegal constructor');\n        }\n        /**\n         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n         * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n         */\n        get desiredSize() {\n            if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1('desiredSize');\n            }\n            return ReadableStreamDefaultControllerGetDesiredSize(this);\n        }\n        /**\n         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n         * the stream, but once those are read, the stream will become closed.\n         */\n        close() {\n            if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1('close');\n            }\n            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                throw new TypeError('The stream is not in a state that permits close');\n            }\n            ReadableStreamDefaultControllerClose(this);\n        }\n        enqueue(chunk = undefined) {\n            if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1('enqueue');\n            }\n            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                throw new TypeError('The stream is not in a state that permits enqueue');\n            }\n            return ReadableStreamDefaultControllerEnqueue(this, chunk);\n        }\n        /**\n         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n         */\n        error(e = undefined) {\n            if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1('error');\n            }\n            ReadableStreamDefaultControllerError(this, e);\n        }\n        /** @internal */\n        [CancelSteps](reason) {\n            ResetQueue(this);\n            const result = this._cancelAlgorithm(reason);\n            ReadableStreamDefaultControllerClearAlgorithms(this);\n            return result;\n        }\n        /** @internal */\n        [PullSteps](readRequest) {\n            const stream = this._controlledReadableStream;\n            if (this._queue.length > 0) {\n                const chunk = DequeueValue(this);\n                if (this._closeRequested && this._queue.length === 0) {\n                    ReadableStreamDefaultControllerClearAlgorithms(this);\n                    ReadableStreamClose(stream);\n                }\n                else {\n                    ReadableStreamDefaultControllerCallPullIfNeeded(this);\n                }\n                readRequest._chunkSteps(chunk);\n            }\n            else {\n                ReadableStreamAddReadRequest(stream, readRequest);\n                ReadableStreamDefaultControllerCallPullIfNeeded(this);\n            }\n        }\n        /** @internal */\n        [ReleaseSteps]() {\n            // Do nothing.\n        }\n    }\n    Object.defineProperties(ReadableStreamDefaultController.prototype, {\n        close: { enumerable: true },\n        enqueue: { enumerable: true },\n        error: { enumerable: true },\n        desiredSize: { enumerable: true }\n    });\n    setFunctionName(ReadableStreamDefaultController.prototype.close, 'close');\n    setFunctionName(ReadableStreamDefaultController.prototype.enqueue, 'enqueue');\n    setFunctionName(ReadableStreamDefaultController.prototype.error, 'error');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamDefaultController.prototype, Symbol.toStringTag, {\n            value: 'ReadableStreamDefaultController',\n            configurable: true\n        });\n    }\n    // Abstract operations for the ReadableStreamDefaultController.\n    function IsReadableStreamDefaultController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n            return false;\n        }\n        return x instanceof ReadableStreamDefaultController;\n    }\n    function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n        const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n        if (!shouldPull) {\n            return;\n        }\n        if (controller._pulling) {\n            controller._pullAgain = true;\n            return;\n        }\n        controller._pulling = true;\n        const pullPromise = controller._pullAlgorithm();\n        uponPromise(pullPromise, () => {\n            controller._pulling = false;\n            if (controller._pullAgain) {\n                controller._pullAgain = false;\n                ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n            }\n            return null;\n        }, e => {\n            ReadableStreamDefaultControllerError(controller, e);\n            return null;\n        });\n    }\n    function ReadableStreamDefaultControllerShouldCallPull(controller) {\n        const stream = controller._controlledReadableStream;\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n            return false;\n        }\n        if (!controller._started) {\n            return false;\n        }\n        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n            return true;\n        }\n        const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n        if (desiredSize > 0) {\n            return true;\n        }\n        return false;\n    }\n    function ReadableStreamDefaultControllerClearAlgorithms(controller) {\n        controller._pullAlgorithm = undefined;\n        controller._cancelAlgorithm = undefined;\n        controller._strategySizeAlgorithm = undefined;\n    }\n    // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n    function ReadableStreamDefaultControllerClose(controller) {\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n            return;\n        }\n        const stream = controller._controlledReadableStream;\n        controller._closeRequested = true;\n        if (controller._queue.length === 0) {\n            ReadableStreamDefaultControllerClearAlgorithms(controller);\n            ReadableStreamClose(stream);\n        }\n    }\n    function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n            return;\n        }\n        const stream = controller._controlledReadableStream;\n        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n            ReadableStreamFulfillReadRequest(stream, chunk, false);\n        }\n        else {\n            let chunkSize;\n            try {\n                chunkSize = controller._strategySizeAlgorithm(chunk);\n            }\n            catch (chunkSizeE) {\n                ReadableStreamDefaultControllerError(controller, chunkSizeE);\n                throw chunkSizeE;\n            }\n            try {\n                EnqueueValueWithSize(controller, chunk, chunkSize);\n            }\n            catch (enqueueE) {\n                ReadableStreamDefaultControllerError(controller, enqueueE);\n                throw enqueueE;\n            }\n        }\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    }\n    function ReadableStreamDefaultControllerError(controller, e) {\n        const stream = controller._controlledReadableStream;\n        if (stream._state !== 'readable') {\n            return;\n        }\n        ResetQueue(controller);\n        ReadableStreamDefaultControllerClearAlgorithms(controller);\n        ReadableStreamError(stream, e);\n    }\n    function ReadableStreamDefaultControllerGetDesiredSize(controller) {\n        const state = controller._controlledReadableStream._state;\n        if (state === 'errored') {\n            return null;\n        }\n        if (state === 'closed') {\n            return 0;\n        }\n        return controller._strategyHWM - controller._queueTotalSize;\n    }\n    // This is used in the implementation of TransformStream.\n    function ReadableStreamDefaultControllerHasBackpressure(controller) {\n        if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n            return false;\n        }\n        return true;\n    }\n    function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n        const state = controller._controlledReadableStream._state;\n        if (!controller._closeRequested && state === 'readable') {\n            return true;\n        }\n        return false;\n    }\n    function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n        controller._controlledReadableStream = stream;\n        controller._queue = undefined;\n        controller._queueTotalSize = undefined;\n        ResetQueue(controller);\n        controller._started = false;\n        controller._closeRequested = false;\n        controller._pullAgain = false;\n        controller._pulling = false;\n        controller._strategySizeAlgorithm = sizeAlgorithm;\n        controller._strategyHWM = highWaterMark;\n        controller._pullAlgorithm = pullAlgorithm;\n        controller._cancelAlgorithm = cancelAlgorithm;\n        stream._readableStreamController = controller;\n        const startResult = startAlgorithm();\n        uponPromise(promiseResolvedWith(startResult), () => {\n            controller._started = true;\n            ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n            return null;\n        }, r => {\n            ReadableStreamDefaultControllerError(controller, r);\n            return null;\n        });\n    }\n    function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\n        const controller = Object.create(ReadableStreamDefaultController.prototype);\n        let startAlgorithm;\n        let pullAlgorithm;\n        let cancelAlgorithm;\n        if (underlyingSource.start !== undefined) {\n            startAlgorithm = () => underlyingSource.start(controller);\n        }\n        else {\n            startAlgorithm = () => undefined;\n        }\n        if (underlyingSource.pull !== undefined) {\n            pullAlgorithm = () => underlyingSource.pull(controller);\n        }\n        else {\n            pullAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        if (underlyingSource.cancel !== undefined) {\n            cancelAlgorithm = reason => underlyingSource.cancel(reason);\n        }\n        else {\n            cancelAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n    }\n    // Helper functions for the ReadableStreamDefaultController.\n    function defaultControllerBrandCheckException$1(name) {\n        return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n    }\n\n    function ReadableStreamTee(stream, cloneForBranch2) {\n        if (IsReadableByteStreamController(stream._readableStreamController)) {\n            return ReadableByteStreamTee(stream);\n        }\n        return ReadableStreamDefaultTee(stream);\n    }\n    function ReadableStreamDefaultTee(stream, cloneForBranch2) {\n        const reader = AcquireReadableStreamDefaultReader(stream);\n        let reading = false;\n        let readAgain = false;\n        let canceled1 = false;\n        let canceled2 = false;\n        let reason1;\n        let reason2;\n        let branch1;\n        let branch2;\n        let resolveCancelPromise;\n        const cancelPromise = newPromise(resolve => {\n            resolveCancelPromise = resolve;\n        });\n        function pullAlgorithm() {\n            if (reading) {\n                readAgain = true;\n                return promiseResolvedWith(undefined);\n            }\n            reading = true;\n            const readRequest = {\n                _chunkSteps: chunk => {\n                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                    // successful synchronously-available reads get ahead of asynchronously-available errors.\n                    _queueMicrotask(() => {\n                        readAgain = false;\n                        const chunk1 = chunk;\n                        const chunk2 = chunk;\n                        // There is no way to access the cloning code right now in the reference implementation.\n                        // If we add one then we'll need an implementation for serializable objects.\n                        // if (!canceled2 && cloneForBranch2) {\n                        //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n                        // }\n                        if (!canceled1) {\n                            ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\n                        }\n                        if (!canceled2) {\n                            ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\n                        }\n                        reading = false;\n                        if (readAgain) {\n                            pullAlgorithm();\n                        }\n                    });\n                },\n                _closeSteps: () => {\n                    reading = false;\n                    if (!canceled1) {\n                        ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n                    }\n                    if (!canceled2) {\n                        ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n                    }\n                    if (!canceled1 || !canceled2) {\n                        resolveCancelPromise(undefined);\n                    }\n                },\n                _errorSteps: () => {\n                    reading = false;\n                }\n            };\n            ReadableStreamDefaultReaderRead(reader, readRequest);\n            return promiseResolvedWith(undefined);\n        }\n        function cancel1Algorithm(reason) {\n            canceled1 = true;\n            reason1 = reason;\n            if (canceled2) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function cancel2Algorithm(reason) {\n            canceled2 = true;\n            reason2 = reason;\n            if (canceled1) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function startAlgorithm() {\n            // do nothing\n        }\n        branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n        branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n        uponRejection(reader._closedPromise, (r) => {\n            ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n            ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n            if (!canceled1 || !canceled2) {\n                resolveCancelPromise(undefined);\n            }\n            return null;\n        });\n        return [branch1, branch2];\n    }\n    function ReadableByteStreamTee(stream) {\n        let reader = AcquireReadableStreamDefaultReader(stream);\n        let reading = false;\n        let readAgainForBranch1 = false;\n        let readAgainForBranch2 = false;\n        let canceled1 = false;\n        let canceled2 = false;\n        let reason1;\n        let reason2;\n        let branch1;\n        let branch2;\n        let resolveCancelPromise;\n        const cancelPromise = newPromise(resolve => {\n            resolveCancelPromise = resolve;\n        });\n        function forwardReaderError(thisReader) {\n            uponRejection(thisReader._closedPromise, r => {\n                if (thisReader !== reader) {\n                    return null;\n                }\n                ReadableByteStreamControllerError(branch1._readableStreamController, r);\n                ReadableByteStreamControllerError(branch2._readableStreamController, r);\n                if (!canceled1 || !canceled2) {\n                    resolveCancelPromise(undefined);\n                }\n                return null;\n            });\n        }\n        function pullWithDefaultReader() {\n            if (IsReadableStreamBYOBReader(reader)) {\n                ReadableStreamReaderGenericRelease(reader);\n                reader = AcquireReadableStreamDefaultReader(stream);\n                forwardReaderError(reader);\n            }\n            const readRequest = {\n                _chunkSteps: chunk => {\n                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                    // successful synchronously-available reads get ahead of asynchronously-available errors.\n                    _queueMicrotask(() => {\n                        readAgainForBranch1 = false;\n                        readAgainForBranch2 = false;\n                        const chunk1 = chunk;\n                        let chunk2 = chunk;\n                        if (!canceled1 && !canceled2) {\n                            try {\n                                chunk2 = CloneAsUint8Array(chunk);\n                            }\n                            catch (cloneE) {\n                                ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n                                ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                                return;\n                            }\n                        }\n                        if (!canceled1) {\n                            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n                        }\n                        if (!canceled2) {\n                            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n                        }\n                        reading = false;\n                        if (readAgainForBranch1) {\n                            pull1Algorithm();\n                        }\n                        else if (readAgainForBranch2) {\n                            pull2Algorithm();\n                        }\n                    });\n                },\n                _closeSteps: () => {\n                    reading = false;\n                    if (!canceled1) {\n                        ReadableByteStreamControllerClose(branch1._readableStreamController);\n                    }\n                    if (!canceled2) {\n                        ReadableByteStreamControllerClose(branch2._readableStreamController);\n                    }\n                    if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n                        ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n                    }\n                    if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n                        ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n                    }\n                    if (!canceled1 || !canceled2) {\n                        resolveCancelPromise(undefined);\n                    }\n                },\n                _errorSteps: () => {\n                    reading = false;\n                }\n            };\n            ReadableStreamDefaultReaderRead(reader, readRequest);\n        }\n        function pullWithBYOBReader(view, forBranch2) {\n            if (IsReadableStreamDefaultReader(reader)) {\n                ReadableStreamReaderGenericRelease(reader);\n                reader = AcquireReadableStreamBYOBReader(stream);\n                forwardReaderError(reader);\n            }\n            const byobBranch = forBranch2 ? branch2 : branch1;\n            const otherBranch = forBranch2 ? branch1 : branch2;\n            const readIntoRequest = {\n                _chunkSteps: chunk => {\n                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                    // successful synchronously-available reads get ahead of asynchronously-available errors.\n                    _queueMicrotask(() => {\n                        readAgainForBranch1 = false;\n                        readAgainForBranch2 = false;\n                        const byobCanceled = forBranch2 ? canceled2 : canceled1;\n                        const otherCanceled = forBranch2 ? canceled1 : canceled2;\n                        if (!otherCanceled) {\n                            let clonedChunk;\n                            try {\n                                clonedChunk = CloneAsUint8Array(chunk);\n                            }\n                            catch (cloneE) {\n                                ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n                                ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                                return;\n                            }\n                            if (!byobCanceled) {\n                                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                            }\n                            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n                        }\n                        else if (!byobCanceled) {\n                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                        }\n                        reading = false;\n                        if (readAgainForBranch1) {\n                            pull1Algorithm();\n                        }\n                        else if (readAgainForBranch2) {\n                            pull2Algorithm();\n                        }\n                    });\n                },\n                _closeSteps: chunk => {\n                    reading = false;\n                    const byobCanceled = forBranch2 ? canceled2 : canceled1;\n                    const otherCanceled = forBranch2 ? canceled1 : canceled2;\n                    if (!byobCanceled) {\n                        ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n                    }\n                    if (!otherCanceled) {\n                        ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n                    }\n                    if (chunk !== undefined) {\n                        if (!byobCanceled) {\n                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                        }\n                        if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n                            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n                        }\n                    }\n                    if (!byobCanceled || !otherCanceled) {\n                        resolveCancelPromise(undefined);\n                    }\n                },\n                _errorSteps: () => {\n                    reading = false;\n                }\n            };\n            ReadableStreamBYOBReaderRead(reader, view, 1, readIntoRequest);\n        }\n        function pull1Algorithm() {\n            if (reading) {\n                readAgainForBranch1 = true;\n                return promiseResolvedWith(undefined);\n            }\n            reading = true;\n            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n            if (byobRequest === null) {\n                pullWithDefaultReader();\n            }\n            else {\n                pullWithBYOBReader(byobRequest._view, false);\n            }\n            return promiseResolvedWith(undefined);\n        }\n        function pull2Algorithm() {\n            if (reading) {\n                readAgainForBranch2 = true;\n                return promiseResolvedWith(undefined);\n            }\n            reading = true;\n            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n            if (byobRequest === null) {\n                pullWithDefaultReader();\n            }\n            else {\n                pullWithBYOBReader(byobRequest._view, true);\n            }\n            return promiseResolvedWith(undefined);\n        }\n        function cancel1Algorithm(reason) {\n            canceled1 = true;\n            reason1 = reason;\n            if (canceled2) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function cancel2Algorithm(reason) {\n            canceled2 = true;\n            reason2 = reason;\n            if (canceled1) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function startAlgorithm() {\n            return;\n        }\n        branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n        branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n        forwardReaderError(reader);\n        return [branch1, branch2];\n    }\n\n    function isReadableStreamLike(stream) {\n        return typeIsObject(stream) && typeof stream.getReader !== 'undefined';\n    }\n\n    function ReadableStreamFrom(source) {\n        if (isReadableStreamLike(source)) {\n            return ReadableStreamFromDefaultReader(source.getReader());\n        }\n        return ReadableStreamFromIterable(source);\n    }\n    function ReadableStreamFromIterable(asyncIterable) {\n        let stream;\n        const iteratorRecord = GetIterator(asyncIterable, 'async');\n        const startAlgorithm = noop;\n        function pullAlgorithm() {\n            let nextResult;\n            try {\n                nextResult = IteratorNext(iteratorRecord);\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n            const nextPromise = promiseResolvedWith(nextResult);\n            return transformPromiseWith(nextPromise, iterResult => {\n                if (!typeIsObject(iterResult)) {\n                    throw new TypeError('The promise returned by the iterator.next() method must fulfill with an object');\n                }\n                const done = IteratorComplete(iterResult);\n                if (done) {\n                    ReadableStreamDefaultControllerClose(stream._readableStreamController);\n                }\n                else {\n                    const value = IteratorValue(iterResult);\n                    ReadableStreamDefaultControllerEnqueue(stream._readableStreamController, value);\n                }\n            });\n        }\n        function cancelAlgorithm(reason) {\n            const iterator = iteratorRecord.iterator;\n            let returnMethod;\n            try {\n                returnMethod = GetMethod(iterator, 'return');\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n            if (returnMethod === undefined) {\n                return promiseResolvedWith(undefined);\n            }\n            let returnResult;\n            try {\n                returnResult = reflectCall(returnMethod, iterator, [reason]);\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n            const returnPromise = promiseResolvedWith(returnResult);\n            return transformPromiseWith(returnPromise, iterResult => {\n                if (!typeIsObject(iterResult)) {\n                    throw new TypeError('The promise returned by the iterator.return() method must fulfill with an object');\n                }\n                return undefined;\n            });\n        }\n        stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);\n        return stream;\n    }\n    function ReadableStreamFromDefaultReader(reader) {\n        let stream;\n        const startAlgorithm = noop;\n        function pullAlgorithm() {\n            let readPromise;\n            try {\n                readPromise = reader.read();\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n            return transformPromiseWith(readPromise, readResult => {\n                if (!typeIsObject(readResult)) {\n                    throw new TypeError('The promise returned by the reader.read() method must fulfill with an object');\n                }\n                if (readResult.done) {\n                    ReadableStreamDefaultControllerClose(stream._readableStreamController);\n                }\n                else {\n                    const value = readResult.value;\n                    ReadableStreamDefaultControllerEnqueue(stream._readableStreamController, value);\n                }\n            });\n        }\n        function cancelAlgorithm(reason) {\n            try {\n                return promiseResolvedWith(reader.cancel(reason));\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n        }\n        stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);\n        return stream;\n    }\n\n    function convertUnderlyingDefaultOrByteSource(source, context) {\n        assertDictionary(source, context);\n        const original = source;\n        const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\n        const cancel = original === null || original === void 0 ? void 0 : original.cancel;\n        const pull = original === null || original === void 0 ? void 0 : original.pull;\n        const start = original === null || original === void 0 ? void 0 : original.start;\n        const type = original === null || original === void 0 ? void 0 : original.type;\n        return {\n            autoAllocateChunkSize: autoAllocateChunkSize === undefined ?\n                undefined :\n                convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),\n            cancel: cancel === undefined ?\n                undefined :\n                convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),\n            pull: pull === undefined ?\n                undefined :\n                convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),\n            start: start === undefined ?\n                undefined :\n                convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),\n            type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n        };\n    }\n    function convertUnderlyingSourceCancelCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (reason) => promiseCall(fn, original, [reason]);\n    }\n    function convertUnderlyingSourcePullCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (controller) => promiseCall(fn, original, [controller]);\n    }\n    function convertUnderlyingSourceStartCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (controller) => reflectCall(fn, original, [controller]);\n    }\n    function convertReadableStreamType(type, context) {\n        type = `${type}`;\n        if (type !== 'bytes') {\n            throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n        }\n        return type;\n    }\n\n    function convertIteratorOptions(options, context) {\n        assertDictionary(options, context);\n        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n        return { preventCancel: Boolean(preventCancel) };\n    }\n\n    function convertPipeOptions(options, context) {\n        assertDictionary(options, context);\n        const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\n        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n        const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\n        const signal = options === null || options === void 0 ? void 0 : options.signal;\n        if (signal !== undefined) {\n            assertAbortSignal(signal, `${context} has member 'signal' that`);\n        }\n        return {\n            preventAbort: Boolean(preventAbort),\n            preventCancel: Boolean(preventCancel),\n            preventClose: Boolean(preventClose),\n            signal\n        };\n    }\n    function assertAbortSignal(signal, context) {\n        if (!isAbortSignal(signal)) {\n            throw new TypeError(`${context} is not an AbortSignal.`);\n        }\n    }\n\n    function convertReadableWritablePair(pair, context) {\n        assertDictionary(pair, context);\n        const readable = pair === null || pair === void 0 ? void 0 : pair.readable;\n        assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n        assertReadableStream(readable, `${context} has member 'readable' that`);\n        const writable = pair === null || pair === void 0 ? void 0 : pair.writable;\n        assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n        assertWritableStream(writable, `${context} has member 'writable' that`);\n        return { readable, writable };\n    }\n\n    /**\n     * A readable stream represents a source of data, from which you can read.\n     *\n     * @public\n     */\n    class ReadableStream {\n        constructor(rawUnderlyingSource = {}, rawStrategy = {}) {\n            if (rawUnderlyingSource === undefined) {\n                rawUnderlyingSource = null;\n            }\n            else {\n                assertObject(rawUnderlyingSource, 'First parameter');\n            }\n            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n            const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n            InitializeReadableStream(this);\n            if (underlyingSource.type === 'bytes') {\n                if (strategy.size !== undefined) {\n                    throw new RangeError('The strategy for a byte stream cannot have a size function');\n                }\n                const highWaterMark = ExtractHighWaterMark(strategy, 0);\n                SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n            }\n            else {\n                const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n                const highWaterMark = ExtractHighWaterMark(strategy, 1);\n                SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n            }\n        }\n        /**\n         * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n         */\n        get locked() {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('locked');\n            }\n            return IsReadableStreamLocked(this);\n        }\n        /**\n         * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n         *\n         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n         * method, which might or might not use it.\n         */\n        cancel(reason = undefined) {\n            if (!IsReadableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$1('cancel'));\n            }\n            if (IsReadableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n            }\n            return ReadableStreamCancel(this, reason);\n        }\n        getReader(rawOptions = undefined) {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('getReader');\n            }\n            const options = convertReaderOptions(rawOptions, 'First parameter');\n            if (options.mode === undefined) {\n                return AcquireReadableStreamDefaultReader(this);\n            }\n            return AcquireReadableStreamBYOBReader(this);\n        }\n        pipeThrough(rawTransform, rawOptions = {}) {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('pipeThrough');\n            }\n            assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n            const transform = convertReadableWritablePair(rawTransform, 'First parameter');\n            const options = convertPipeOptions(rawOptions, 'Second parameter');\n            if (IsReadableStreamLocked(this)) {\n                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n            }\n            if (IsWritableStreamLocked(transform.writable)) {\n                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n            }\n            const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n            setPromiseIsHandledToTrue(promise);\n            return transform.readable;\n        }\n        pipeTo(destination, rawOptions = {}) {\n            if (!IsReadableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));\n            }\n            if (destination === undefined) {\n                return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n            }\n            if (!IsWritableStream(destination)) {\n                return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));\n            }\n            let options;\n            try {\n                options = convertPipeOptions(rawOptions, 'Second parameter');\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n            if (IsReadableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));\n            }\n            if (IsWritableStreamLocked(destination)) {\n                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));\n            }\n            return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n        }\n        /**\n         * Tees this readable stream, returning a two-element array containing the two resulting branches as\n         * new {@link ReadableStream} instances.\n         *\n         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n         * propagated to the stream's underlying source.\n         *\n         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n         * this could allow interference between the two branches.\n         */\n        tee() {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('tee');\n            }\n            const branches = ReadableStreamTee(this);\n            return CreateArrayFromList(branches);\n        }\n        values(rawOptions = undefined) {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('values');\n            }\n            const options = convertIteratorOptions(rawOptions, 'First parameter');\n            return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\n        }\n        [SymbolAsyncIterator](options) {\n            // Stub implementation, overridden below\n            return this.values(options);\n        }\n        /**\n         * Creates a new ReadableStream wrapping the provided iterable or async iterable.\n         *\n         * This can be used to adapt various kinds of objects into a readable stream,\n         * such as an array, an async generator, or a Node.js readable stream.\n         */\n        static from(asyncIterable) {\n            return ReadableStreamFrom(asyncIterable);\n        }\n    }\n    Object.defineProperties(ReadableStream, {\n        from: { enumerable: true }\n    });\n    Object.defineProperties(ReadableStream.prototype, {\n        cancel: { enumerable: true },\n        getReader: { enumerable: true },\n        pipeThrough: { enumerable: true },\n        pipeTo: { enumerable: true },\n        tee: { enumerable: true },\n        values: { enumerable: true },\n        locked: { enumerable: true }\n    });\n    setFunctionName(ReadableStream.from, 'from');\n    setFunctionName(ReadableStream.prototype.cancel, 'cancel');\n    setFunctionName(ReadableStream.prototype.getReader, 'getReader');\n    setFunctionName(ReadableStream.prototype.pipeThrough, 'pipeThrough');\n    setFunctionName(ReadableStream.prototype.pipeTo, 'pipeTo');\n    setFunctionName(ReadableStream.prototype.tee, 'tee');\n    setFunctionName(ReadableStream.prototype.values, 'values');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStream.prototype, Symbol.toStringTag, {\n            value: 'ReadableStream',\n            configurable: true\n        });\n    }\n    Object.defineProperty(ReadableStream.prototype, SymbolAsyncIterator, {\n        value: ReadableStream.prototype.values,\n        writable: true,\n        configurable: true\n    });\n    // Abstract operations for the ReadableStream.\n    // Throws if and only if startAlgorithm throws.\n    function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\n        const stream = Object.create(ReadableStream.prototype);\n        InitializeReadableStream(stream);\n        const controller = Object.create(ReadableStreamDefaultController.prototype);\n        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n        return stream;\n    }\n    // Throws if and only if startAlgorithm throws.\n    function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\n        const stream = Object.create(ReadableStream.prototype);\n        InitializeReadableStream(stream);\n        const controller = Object.create(ReadableByteStreamController.prototype);\n        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n        return stream;\n    }\n    function InitializeReadableStream(stream) {\n        stream._state = 'readable';\n        stream._reader = undefined;\n        stream._storedError = undefined;\n        stream._disturbed = false;\n    }\n    function IsReadableStream(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n            return false;\n        }\n        return x instanceof ReadableStream;\n    }\n    function IsReadableStreamLocked(stream) {\n        if (stream._reader === undefined) {\n            return false;\n        }\n        return true;\n    }\n    // ReadableStream API exposed for controllers.\n    function ReadableStreamCancel(stream, reason) {\n        stream._disturbed = true;\n        if (stream._state === 'closed') {\n            return promiseResolvedWith(undefined);\n        }\n        if (stream._state === 'errored') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        ReadableStreamClose(stream);\n        const reader = stream._reader;\n        if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n            const readIntoRequests = reader._readIntoRequests;\n            reader._readIntoRequests = new SimpleQueue();\n            readIntoRequests.forEach(readIntoRequest => {\n                readIntoRequest._closeSteps(undefined);\n            });\n        }\n        const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n        return transformPromiseWith(sourceCancelPromise, noop);\n    }\n    function ReadableStreamClose(stream) {\n        stream._state = 'closed';\n        const reader = stream._reader;\n        if (reader === undefined) {\n            return;\n        }\n        defaultReaderClosedPromiseResolve(reader);\n        if (IsReadableStreamDefaultReader(reader)) {\n            const readRequests = reader._readRequests;\n            reader._readRequests = new SimpleQueue();\n            readRequests.forEach(readRequest => {\n                readRequest._closeSteps();\n            });\n        }\n    }\n    function ReadableStreamError(stream, e) {\n        stream._state = 'errored';\n        stream._storedError = e;\n        const reader = stream._reader;\n        if (reader === undefined) {\n            return;\n        }\n        defaultReaderClosedPromiseReject(reader, e);\n        if (IsReadableStreamDefaultReader(reader)) {\n            ReadableStreamDefaultReaderErrorReadRequests(reader, e);\n        }\n        else {\n            ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e);\n        }\n    }\n    // Helper functions for the ReadableStream.\n    function streamBrandCheckException$1(name) {\n        return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n    }\n\n    function convertQueuingStrategyInit(init, context) {\n        assertDictionary(init, context);\n        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n        assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n        return {\n            highWaterMark: convertUnrestrictedDouble(highWaterMark)\n        };\n    }\n\n    // The size function must not have a prototype property nor be a constructor\n    const byteLengthSizeFunction = (chunk) => {\n        return chunk.byteLength;\n    };\n    setFunctionName(byteLengthSizeFunction, 'size');\n    /**\n     * A queuing strategy that counts the number of bytes in each chunk.\n     *\n     * @public\n     */\n    class ByteLengthQueuingStrategy {\n        constructor(options) {\n            assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n            options = convertQueuingStrategyInit(options, 'First parameter');\n            this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n        }\n        /**\n         * Returns the high water mark provided to the constructor.\n         */\n        get highWaterMark() {\n            if (!IsByteLengthQueuingStrategy(this)) {\n                throw byteLengthBrandCheckException('highWaterMark');\n            }\n            return this._byteLengthQueuingStrategyHighWaterMark;\n        }\n        /**\n         * Measures the size of `chunk` by returning the value of its `byteLength` property.\n         */\n        get size() {\n            if (!IsByteLengthQueuingStrategy(this)) {\n                throw byteLengthBrandCheckException('size');\n            }\n            return byteLengthSizeFunction;\n        }\n    }\n    Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\n        highWaterMark: { enumerable: true },\n        size: { enumerable: true }\n    });\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(ByteLengthQueuingStrategy.prototype, Symbol.toStringTag, {\n            value: 'ByteLengthQueuingStrategy',\n            configurable: true\n        });\n    }\n    // Helper functions for the ByteLengthQueuingStrategy.\n    function byteLengthBrandCheckException(name) {\n        return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n    }\n    function IsByteLengthQueuingStrategy(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n            return false;\n        }\n        return x instanceof ByteLengthQueuingStrategy;\n    }\n\n    // The size function must not have a prototype property nor be a constructor\n    const countSizeFunction = () => {\n        return 1;\n    };\n    setFunctionName(countSizeFunction, 'size');\n    /**\n     * A queuing strategy that counts the number of chunks.\n     *\n     * @public\n     */\n    class CountQueuingStrategy {\n        constructor(options) {\n            assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n            options = convertQueuingStrategyInit(options, 'First parameter');\n            this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n        }\n        /**\n         * Returns the high water mark provided to the constructor.\n         */\n        get highWaterMark() {\n            if (!IsCountQueuingStrategy(this)) {\n                throw countBrandCheckException('highWaterMark');\n            }\n            return this._countQueuingStrategyHighWaterMark;\n        }\n        /**\n         * Measures the size of `chunk` by always returning 1.\n         * This ensures that the total queue size is a count of the number of chunks in the queue.\n         */\n        get size() {\n            if (!IsCountQueuingStrategy(this)) {\n                throw countBrandCheckException('size');\n            }\n            return countSizeFunction;\n        }\n    }\n    Object.defineProperties(CountQueuingStrategy.prototype, {\n        highWaterMark: { enumerable: true },\n        size: { enumerable: true }\n    });\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(CountQueuingStrategy.prototype, Symbol.toStringTag, {\n            value: 'CountQueuingStrategy',\n            configurable: true\n        });\n    }\n    // Helper functions for the CountQueuingStrategy.\n    function countBrandCheckException(name) {\n        return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n    }\n    function IsCountQueuingStrategy(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n            return false;\n        }\n        return x instanceof CountQueuingStrategy;\n    }\n\n    function convertTransformer(original, context) {\n        assertDictionary(original, context);\n        const cancel = original === null || original === void 0 ? void 0 : original.cancel;\n        const flush = original === null || original === void 0 ? void 0 : original.flush;\n        const readableType = original === null || original === void 0 ? void 0 : original.readableType;\n        const start = original === null || original === void 0 ? void 0 : original.start;\n        const transform = original === null || original === void 0 ? void 0 : original.transform;\n        const writableType = original === null || original === void 0 ? void 0 : original.writableType;\n        return {\n            cancel: cancel === undefined ?\n                undefined :\n                convertTransformerCancelCallback(cancel, original, `${context} has member 'cancel' that`),\n            flush: flush === undefined ?\n                undefined :\n                convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),\n            readableType,\n            start: start === undefined ?\n                undefined :\n                convertTransformerStartCallback(start, original, `${context} has member 'start' that`),\n            transform: transform === undefined ?\n                undefined :\n                convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),\n            writableType\n        };\n    }\n    function convertTransformerFlushCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (controller) => promiseCall(fn, original, [controller]);\n    }\n    function convertTransformerStartCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (controller) => reflectCall(fn, original, [controller]);\n    }\n    function convertTransformerTransformCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\n    }\n    function convertTransformerCancelCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (reason) => promiseCall(fn, original, [reason]);\n    }\n\n    // Class TransformStream\n    /**\n     * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n     * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n     * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n     * made available for reading from the readable side.\n     *\n     * @public\n     */\n    class TransformStream {\n        constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {\n            if (rawTransformer === undefined) {\n                rawTransformer = null;\n            }\n            const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n            const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n            const transformer = convertTransformer(rawTransformer, 'First parameter');\n            if (transformer.readableType !== undefined) {\n                throw new RangeError('Invalid readableType specified');\n            }\n            if (transformer.writableType !== undefined) {\n                throw new RangeError('Invalid writableType specified');\n            }\n            const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n            const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n            const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n            const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n            let startPromise_resolve;\n            const startPromise = newPromise(resolve => {\n                startPromise_resolve = resolve;\n            });\n            InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n            SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n            if (transformer.start !== undefined) {\n                startPromise_resolve(transformer.start(this._transformStreamController));\n            }\n            else {\n                startPromise_resolve(undefined);\n            }\n        }\n        /**\n         * The readable side of the transform stream.\n         */\n        get readable() {\n            if (!IsTransformStream(this)) {\n                throw streamBrandCheckException('readable');\n            }\n            return this._readable;\n        }\n        /**\n         * The writable side of the transform stream.\n         */\n        get writable() {\n            if (!IsTransformStream(this)) {\n                throw streamBrandCheckException('writable');\n            }\n            return this._writable;\n        }\n    }\n    Object.defineProperties(TransformStream.prototype, {\n        readable: { enumerable: true },\n        writable: { enumerable: true }\n    });\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {\n            value: 'TransformStream',\n            configurable: true\n        });\n    }\n    function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\n        function startAlgorithm() {\n            return startPromise;\n        }\n        function writeAlgorithm(chunk) {\n            return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n        }\n        function abortAlgorithm(reason) {\n            return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n        }\n        function closeAlgorithm() {\n            return TransformStreamDefaultSinkCloseAlgorithm(stream);\n        }\n        stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\n        function pullAlgorithm() {\n            return TransformStreamDefaultSourcePullAlgorithm(stream);\n        }\n        function cancelAlgorithm(reason) {\n            return TransformStreamDefaultSourceCancelAlgorithm(stream, reason);\n        }\n        stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n        // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n        stream._backpressure = undefined;\n        stream._backpressureChangePromise = undefined;\n        stream._backpressureChangePromise_resolve = undefined;\n        TransformStreamSetBackpressure(stream, true);\n        stream._transformStreamController = undefined;\n    }\n    function IsTransformStream(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n            return false;\n        }\n        return x instanceof TransformStream;\n    }\n    // This is a no-op if both sides are already errored.\n    function TransformStreamError(stream, e) {\n        ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n        TransformStreamErrorWritableAndUnblockWrite(stream, e);\n    }\n    function TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n        TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n        WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n        TransformStreamUnblockWrite(stream);\n    }\n    function TransformStreamUnblockWrite(stream) {\n        if (stream._backpressure) {\n            // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n            // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n            // _backpressure is set.\n            TransformStreamSetBackpressure(stream, false);\n        }\n    }\n    function TransformStreamSetBackpressure(stream, backpressure) {\n        // Passes also when called during construction.\n        if (stream._backpressureChangePromise !== undefined) {\n            stream._backpressureChangePromise_resolve();\n        }\n        stream._backpressureChangePromise = newPromise(resolve => {\n            stream._backpressureChangePromise_resolve = resolve;\n        });\n        stream._backpressure = backpressure;\n    }\n    // Class TransformStreamDefaultController\n    /**\n     * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n     *\n     * @public\n     */\n    class TransformStreamDefaultController {\n        constructor() {\n            throw new TypeError('Illegal constructor');\n        }\n        /**\n         * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n         */\n        get desiredSize() {\n            if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException('desiredSize');\n            }\n            const readableController = this._controlledTransformStream._readable._readableStreamController;\n            return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n        }\n        enqueue(chunk = undefined) {\n            if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException('enqueue');\n            }\n            TransformStreamDefaultControllerEnqueue(this, chunk);\n        }\n        /**\n         * Errors both the readable side and the writable side of the controlled transform stream, making all future\n         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n         */\n        error(reason = undefined) {\n            if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException('error');\n            }\n            TransformStreamDefaultControllerError(this, reason);\n        }\n        /**\n         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n         * transformer only needs to consume a portion of the chunks written to the writable side.\n         */\n        terminate() {\n            if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException('terminate');\n            }\n            TransformStreamDefaultControllerTerminate(this);\n        }\n    }\n    Object.defineProperties(TransformStreamDefaultController.prototype, {\n        enqueue: { enumerable: true },\n        error: { enumerable: true },\n        terminate: { enumerable: true },\n        desiredSize: { enumerable: true }\n    });\n    setFunctionName(TransformStreamDefaultController.prototype.enqueue, 'enqueue');\n    setFunctionName(TransformStreamDefaultController.prototype.error, 'error');\n    setFunctionName(TransformStreamDefaultController.prototype.terminate, 'terminate');\n    if (typeof Symbol.toStringTag === 'symbol') {\n        Object.defineProperty(TransformStreamDefaultController.prototype, Symbol.toStringTag, {\n            value: 'TransformStreamDefaultController',\n            configurable: true\n        });\n    }\n    // Transform Stream Default Controller Abstract Operations\n    function IsTransformStreamDefaultController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n            return false;\n        }\n        return x instanceof TransformStreamDefaultController;\n    }\n    function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm, cancelAlgorithm) {\n        controller._controlledTransformStream = stream;\n        stream._transformStreamController = controller;\n        controller._transformAlgorithm = transformAlgorithm;\n        controller._flushAlgorithm = flushAlgorithm;\n        controller._cancelAlgorithm = cancelAlgorithm;\n        controller._finishPromise = undefined;\n        controller._finishPromise_resolve = undefined;\n        controller._finishPromise_reject = undefined;\n    }\n    function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n        const controller = Object.create(TransformStreamDefaultController.prototype);\n        let transformAlgorithm;\n        let flushAlgorithm;\n        let cancelAlgorithm;\n        if (transformer.transform !== undefined) {\n            transformAlgorithm = chunk => transformer.transform(chunk, controller);\n        }\n        else {\n            transformAlgorithm = chunk => {\n                try {\n                    TransformStreamDefaultControllerEnqueue(controller, chunk);\n                    return promiseResolvedWith(undefined);\n                }\n                catch (transformResultE) {\n                    return promiseRejectedWith(transformResultE);\n                }\n            };\n        }\n        if (transformer.flush !== undefined) {\n            flushAlgorithm = () => transformer.flush(controller);\n        }\n        else {\n            flushAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        if (transformer.cancel !== undefined) {\n            cancelAlgorithm = reason => transformer.cancel(reason);\n        }\n        else {\n            cancelAlgorithm = () => promiseResolvedWith(undefined);\n        }\n        SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm, cancelAlgorithm);\n    }\n    function TransformStreamDefaultControllerClearAlgorithms(controller) {\n        controller._transformAlgorithm = undefined;\n        controller._flushAlgorithm = undefined;\n        controller._cancelAlgorithm = undefined;\n    }\n    function TransformStreamDefaultControllerEnqueue(controller, chunk) {\n        const stream = controller._controlledTransformStream;\n        const readableController = stream._readable._readableStreamController;\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n            throw new TypeError('Readable side is not in a state that permits enqueue');\n        }\n        // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n        // accept TransformStreamDefaultControllerEnqueue() calls.\n        try {\n            ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n        }\n        catch (e) {\n            // This happens when readableStrategy.size() throws.\n            TransformStreamErrorWritableAndUnblockWrite(stream, e);\n            throw stream._readable._storedError;\n        }\n        const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n        if (backpressure !== stream._backpressure) {\n            TransformStreamSetBackpressure(stream, true);\n        }\n    }\n    function TransformStreamDefaultControllerError(controller, e) {\n        TransformStreamError(controller._controlledTransformStream, e);\n    }\n    function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n        const transformPromise = controller._transformAlgorithm(chunk);\n        return transformPromiseWith(transformPromise, undefined, r => {\n            TransformStreamError(controller._controlledTransformStream, r);\n            throw r;\n        });\n    }\n    function TransformStreamDefaultControllerTerminate(controller) {\n        const stream = controller._controlledTransformStream;\n        const readableController = stream._readable._readableStreamController;\n        ReadableStreamDefaultControllerClose(readableController);\n        const error = new TypeError('TransformStream terminated');\n        TransformStreamErrorWritableAndUnblockWrite(stream, error);\n    }\n    // TransformStreamDefaultSink Algorithms\n    function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n        const controller = stream._transformStreamController;\n        if (stream._backpressure) {\n            const backpressureChangePromise = stream._backpressureChangePromise;\n            return transformPromiseWith(backpressureChangePromise, () => {\n                const writable = stream._writable;\n                const state = writable._state;\n                if (state === 'erroring') {\n                    throw writable._storedError;\n                }\n                return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n            });\n        }\n        return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n    }\n    function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n        const controller = stream._transformStreamController;\n        if (controller._finishPromise !== undefined) {\n            return controller._finishPromise;\n        }\n        // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n        const readable = stream._readable;\n        // Assign the _finishPromise now so that if _cancelAlgorithm calls readable.cancel() internally,\n        // we don't run the _cancelAlgorithm again.\n        controller._finishPromise = newPromise((resolve, reject) => {\n            controller._finishPromise_resolve = resolve;\n            controller._finishPromise_reject = reject;\n        });\n        const cancelPromise = controller._cancelAlgorithm(reason);\n        TransformStreamDefaultControllerClearAlgorithms(controller);\n        uponPromise(cancelPromise, () => {\n            if (readable._state === 'errored') {\n                defaultControllerFinishPromiseReject(controller, readable._storedError);\n            }\n            else {\n                ReadableStreamDefaultControllerError(readable._readableStreamController, reason);\n                defaultControllerFinishPromiseResolve(controller);\n            }\n            return null;\n        }, r => {\n            ReadableStreamDefaultControllerError(readable._readableStreamController, r);\n            defaultControllerFinishPromiseReject(controller, r);\n            return null;\n        });\n        return controller._finishPromise;\n    }\n    function TransformStreamDefaultSinkCloseAlgorithm(stream) {\n        const controller = stream._transformStreamController;\n        if (controller._finishPromise !== undefined) {\n            return controller._finishPromise;\n        }\n        // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n        const readable = stream._readable;\n        // Assign the _finishPromise now so that if _flushAlgorithm calls readable.cancel() internally,\n        // we don't also run the _cancelAlgorithm.\n        controller._finishPromise = newPromise((resolve, reject) => {\n            controller._finishPromise_resolve = resolve;\n            controller._finishPromise_reject = reject;\n        });\n        const flushPromise = controller._flushAlgorithm();\n        TransformStreamDefaultControllerClearAlgorithms(controller);\n        uponPromise(flushPromise, () => {\n            if (readable._state === 'errored') {\n                defaultControllerFinishPromiseReject(controller, readable._storedError);\n            }\n            else {\n                ReadableStreamDefaultControllerClose(readable._readableStreamController);\n                defaultControllerFinishPromiseResolve(controller);\n            }\n            return null;\n        }, r => {\n            ReadableStreamDefaultControllerError(readable._readableStreamController, r);\n            defaultControllerFinishPromiseReject(controller, r);\n            return null;\n        });\n        return controller._finishPromise;\n    }\n    // TransformStreamDefaultSource Algorithms\n    function TransformStreamDefaultSourcePullAlgorithm(stream) {\n        // Invariant. Enforced by the promises returned by start() and pull().\n        TransformStreamSetBackpressure(stream, false);\n        // Prevent the next pull() call until there is backpressure.\n        return stream._backpressureChangePromise;\n    }\n    function TransformStreamDefaultSourceCancelAlgorithm(stream, reason) {\n        const controller = stream._transformStreamController;\n        if (controller._finishPromise !== undefined) {\n            return controller._finishPromise;\n        }\n        // stream._writable cannot change after construction, so caching it across a call to user code is safe.\n        const writable = stream._writable;\n        // Assign the _finishPromise now so that if _flushAlgorithm calls writable.abort() or\n        // writable.cancel() internally, we don't run the _cancelAlgorithm again, or also run the\n        // _flushAlgorithm.\n        controller._finishPromise = newPromise((resolve, reject) => {\n            controller._finishPromise_resolve = resolve;\n            controller._finishPromise_reject = reject;\n        });\n        const cancelPromise = controller._cancelAlgorithm(reason);\n        TransformStreamDefaultControllerClearAlgorithms(controller);\n        uponPromise(cancelPromise, () => {\n            if (writable._state === 'errored') {\n                defaultControllerFinishPromiseReject(controller, writable._storedError);\n            }\n            else {\n                WritableStreamDefaultControllerErrorIfNeeded(writable._writableStreamController, reason);\n                TransformStreamUnblockWrite(stream);\n                defaultControllerFinishPromiseResolve(controller);\n            }\n            return null;\n        }, r => {\n            WritableStreamDefaultControllerErrorIfNeeded(writable._writableStreamController, r);\n            TransformStreamUnblockWrite(stream);\n            defaultControllerFinishPromiseReject(controller, r);\n            return null;\n        });\n        return controller._finishPromise;\n    }\n    // Helper functions for the TransformStreamDefaultController.\n    function defaultControllerBrandCheckException(name) {\n        return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n    }\n    function defaultControllerFinishPromiseResolve(controller) {\n        if (controller._finishPromise_resolve === undefined) {\n            return;\n        }\n        controller._finishPromise_resolve();\n        controller._finishPromise_resolve = undefined;\n        controller._finishPromise_reject = undefined;\n    }\n    function defaultControllerFinishPromiseReject(controller, reason) {\n        if (controller._finishPromise_reject === undefined) {\n            return;\n        }\n        setPromiseIsHandledToTrue(controller._finishPromise);\n        controller._finishPromise_reject(reason);\n        controller._finishPromise_resolve = undefined;\n        controller._finishPromise_reject = undefined;\n    }\n    // Helper functions for the TransformStream.\n    function streamBrandCheckException(name) {\n        return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);\n    }\n\n    exports.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\n    exports.CountQueuingStrategy = CountQueuingStrategy;\n    exports.ReadableByteStreamController = ReadableByteStreamController;\n    exports.ReadableStream = ReadableStream;\n    exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\n    exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\n    exports.ReadableStreamDefaultController = ReadableStreamDefaultController;\n    exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\n    exports.TransformStream = TransformStream;\n    exports.TransformStreamDefaultController = TransformStreamDefaultController;\n    exports.WritableStream = WritableStream;\n    exports.WritableStreamDefaultController = WritableStreamDefaultController;\n    exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\n\n}));\n//# sourceMappingURL=ponyfill.es2018.js.map\n","/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\nif (!globalThis.DOMException) {\n  try {\n    const { MessageChannel } = require('worker_threads'),\n    port = new MessageChannel().port1,\n    ab = new ArrayBuffer()\n    port.postMessage(ab, [ab, ab])\n  } catch (err) {\n    err.constructor.name === 'DOMException' && (\n      globalThis.DOMException = err.constructor\n    )\n  }\n}\n\nmodule.exports = globalThis.DOMException\n","import Blob from './index.js'\n\nconst _File = class File extends Blob {\n  #lastModified = 0\n  #name = ''\n\n  /**\n   * @param {*[]} fileBits\n   * @param {string} fileName\n   * @param {{lastModified?: number, type?: string}} options\n   */// @ts-ignore\n  constructor (fileBits, fileName, options = {}) {\n    if (arguments.length < 2) {\n      throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`)\n    }\n    super(fileBits, options)\n\n    if (options === null) options = {}\n\n    // Simulate WebIDL type casting for NaN value in lastModified option.\n    const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified)\n    if (!Number.isNaN(lastModified)) {\n      this.#lastModified = lastModified\n    }\n\n    this.#name = String(fileName)\n  }\n\n  get name () {\n    return this.#name\n  }\n\n  get lastModified () {\n    return this.#lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'File'\n  }\n\n  static [Symbol.hasInstance] (object) {\n    return !!object && object instanceof Blob &&\n      /^(File)$/.test(object[Symbol.toStringTag])\n  }\n}\n\n/** @type {typeof globalThis.File} */// @ts-ignore\nexport const File = _File\nexport default File\n","/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\n// TODO (jimmywarting): in the feature use conditional loading with top level await (requires 14.x)\n// Node has recently added whatwg stream into core\n\nimport './streams.cjs'\n\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536\n\n/** @param {(Blob | Uint8Array)[]} parts */\nasync function * toIterator (parts, clone = true) {\n  for (const part of parts) {\n    if ('stream' in part) {\n      yield * (/** @type {AsyncIterableIterator<Uint8Array>} */ (part.stream()))\n    } else if (ArrayBuffer.isView(part)) {\n      if (clone) {\n        let position = part.byteOffset\n        const end = part.byteOffset + part.byteLength\n        while (position !== end) {\n          const size = Math.min(end - position, POOL_SIZE)\n          const chunk = part.buffer.slice(position, position + size)\n          position += chunk.byteLength\n          yield new Uint8Array(chunk)\n        }\n      } else {\n        yield part\n      }\n    /* c8 ignore next 10 */\n    } else {\n      // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\n      let position = 0, b = (/** @type {Blob} */ (part))\n      while (position !== b.size) {\n        const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE))\n        const buffer = await chunk.arrayBuffer()\n        position += buffer.byteLength\n        yield new Uint8Array(buffer)\n      }\n    }\n  }\n}\n\nconst _Blob = class Blob {\n  /** @type {Array.<(Blob|Uint8Array)>} */\n  #parts = []\n  #type = ''\n  #size = 0\n  #endings = 'transparent'\n\n  /**\n   * The Blob() constructor returns a new Blob object. The content\n   * of the blob consists of the concatenation of the values given\n   * in the parameter array.\n   *\n   * @param {*} blobParts\n   * @param {{ type?: string, endings?: string }} [options]\n   */\n  constructor (blobParts = [], options = {}) {\n    if (typeof blobParts !== 'object' || blobParts === null) {\n      throw new TypeError('Failed to construct \\'Blob\\': The provided value cannot be converted to a sequence.')\n    }\n\n    if (typeof blobParts[Symbol.iterator] !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': The object must have a callable @@iterator property.')\n    }\n\n    if (typeof options !== 'object' && typeof options !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': parameter 2 cannot convert to dictionary.')\n    }\n\n    if (options === null) options = {}\n\n    const encoder = new TextEncoder()\n    for (const element of blobParts) {\n      let part\n      if (ArrayBuffer.isView(element)) {\n        part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength))\n      } else if (element instanceof ArrayBuffer) {\n        part = new Uint8Array(element.slice(0))\n      } else if (element instanceof Blob) {\n        part = element\n      } else {\n        part = encoder.encode(`${element}`)\n      }\n\n      this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size\n      this.#parts.push(part)\n    }\n\n    this.#endings = `${options.endings === undefined ? 'transparent' : options.endings}`\n    const type = options.type === undefined ? '' : String(options.type)\n    this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : ''\n  }\n\n  /**\n   * The Blob interface's size property returns the\n   * size of the Blob in bytes.\n   */\n  get size () {\n    return this.#size\n  }\n\n  /**\n   * The type property of a Blob object returns the MIME type of the file.\n   */\n  get type () {\n    return this.#type\n  }\n\n  /**\n   * The text() method in the Blob interface returns a Promise\n   * that resolves with a string containing the contents of\n   * the blob, interpreted as UTF-8.\n   *\n   * @return {Promise<string>}\n   */\n  async text () {\n    // More optimized than using this.arrayBuffer()\n    // that requires twice as much ram\n    const decoder = new TextDecoder()\n    let str = ''\n    for await (const part of toIterator(this.#parts, false)) {\n      str += decoder.decode(part, { stream: true })\n    }\n    // Remaining\n    str += decoder.decode()\n    return str\n  }\n\n  /**\n   * The arrayBuffer() method in the Blob interface returns a\n   * Promise that resolves with the contents of the blob as\n   * binary data contained in an ArrayBuffer.\n   *\n   * @return {Promise<ArrayBuffer>}\n   */\n  async arrayBuffer () {\n    // Easier way... Just a unnecessary overhead\n    // const view = new Uint8Array(this.size);\n    // await this.stream().getReader({mode: 'byob'}).read(view);\n    // return view.buffer;\n\n    const data = new Uint8Array(this.size)\n    let offset = 0\n    for await (const chunk of toIterator(this.#parts, false)) {\n      data.set(chunk, offset)\n      offset += chunk.length\n    }\n\n    return data.buffer\n  }\n\n  stream () {\n    const it = toIterator(this.#parts, true)\n\n    return new globalThis.ReadableStream({\n      // @ts-ignore\n      type: 'bytes',\n      async pull (ctrl) {\n        const chunk = await it.next()\n        chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value)\n      },\n\n      async cancel () {\n        await it.return()\n      }\n    })\n  }\n\n  /**\n   * The Blob interface's slice() method creates and returns a\n   * new Blob object which contains data from a subset of the\n   * blob on which it's called.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {string} [type]\n   */\n  slice (start = 0, end = this.size, type = '') {\n    const { size } = this\n\n    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size)\n    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size)\n\n    const span = Math.max(relativeEnd - relativeStart, 0)\n    const parts = this.#parts\n    const blobParts = []\n    let added = 0\n\n    for (const part of parts) {\n      // don't add the overflow to new blobParts\n      if (added >= span) {\n        break\n      }\n\n      const size = ArrayBuffer.isView(part) ? part.byteLength : part.size\n      if (relativeStart && size <= relativeStart) {\n        // Skip the beginning and change the relative\n        // start & end position as we skip the unwanted parts\n        relativeStart -= size\n        relativeEnd -= size\n      } else {\n        let chunk\n        if (ArrayBuffer.isView(part)) {\n          chunk = part.subarray(relativeStart, Math.min(size, relativeEnd))\n          added += chunk.byteLength\n        } else {\n          chunk = part.slice(relativeStart, Math.min(size, relativeEnd))\n          added += chunk.size\n        }\n        relativeEnd -= size\n        blobParts.push(chunk)\n        relativeStart = 0 // All next sequential parts should start at 0\n      }\n    }\n\n    const blob = new Blob([], { type: String(type).toLowerCase() })\n    blob.#size = span\n    blob.#parts = blobParts\n\n    return blob\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n\n  static [Symbol.hasInstance] (object) {\n    return (\n      object &&\n      typeof object === 'object' &&\n      typeof object.constructor === 'function' &&\n      (\n        typeof object.stream === 'function' ||\n        typeof object.arrayBuffer === 'function'\n      ) &&\n      /^(Blob|File)$/.test(object[Symbol.toStringTag])\n    )\n  }\n}\n\nObject.defineProperties(_Blob.prototype, {\n  size: { enumerable: true },\n  type: { enumerable: true },\n  slice: { enumerable: true }\n})\n\n/** @type {typeof globalThis.Blob} */\nexport const Blob = _Blob\nexport default Blob\n","/* c8 ignore start */\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536\n\nif (!globalThis.ReadableStream) {\n  // `node:stream/web` got introduced in v16.5.0 as experimental\n  // and it's preferred over the polyfilled version. So we also\n  // suppress the warning that gets emitted by NodeJS for using it.\n  try {\n    const process = require('node:process')\n    const { emitWarning } = process\n    try {\n      process.emitWarning = () => {}\n      Object.assign(globalThis, require('node:stream/web'))\n      process.emitWarning = emitWarning\n    } catch (error) {\n      process.emitWarning = emitWarning\n      throw error\n    }\n  } catch (error) {\n    // fallback to polyfill implementation\n    Object.assign(globalThis, require('web-streams-polyfill/dist/ponyfill.es2018.js'))\n  }\n}\n\ntry {\n  // Don't use node: prefix for this, require+node: is not supported until node v14.14\n  // Only `import()` can use prefix in 12.20 and later\n  const { Blob } = require('buffer')\n  if (Blob && !Blob.prototype.stream) {\n    Blob.prototype.stream = function name (params) {\n      let position = 0\n      const blob = this\n\n      return new ReadableStream({\n        type: 'bytes',\n        async pull (ctrl) {\n          const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE))\n          const buffer = await chunk.arrayBuffer()\n          position += buffer.byteLength\n          ctrl.enqueue(new Uint8Array(buffer))\n\n          if (position === blob.size) {\n            ctrl.close()\n          }\n        }\n      })\n    }\n  }\n} catch (error) {}\n/* c8 ignore end */\n","/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\nimport C from 'fetch-blob'\nimport F from 'fetch-blob/file.js'\n\nvar {toStringTag:t,iterator:i,hasInstance:h}=Symbol,\nr=Math.random,\nm='append,set,get,getAll,delete,keys,values,entries,forEach,constructor'.split(','),\nf=(a,b,c)=>(a+='',/^(Blob|File)$/.test(b && b[t])?[(c=c!==void 0?c+'':b[t]=='File'?b.name:'blob',a),b.name!==c||b[t]=='blob'?new F([b],c,b):b]:[a,b+'']),\ne=(c,f)=>(f?c:c.replace(/\\r?\\n|\\r/g,'\\r\\n')).replace(/\\n/g,'%0A').replace(/\\r/g,'%0D').replace(/\"/g,'%22'),\nx=(n, a, e)=>{if(a.length<e){throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e} arguments required, but only ${a.length} present.`)}}\n\nexport const File = F\n\n/** @type {typeof globalThis.FormData} */\nexport const FormData = class FormData {\n#d=[];\nconstructor(...a){if(a.length)throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`)}\nget [t]() {return 'FormData'}\n[i](){return this.entries()}\nstatic [h](o) {return o&&typeof o==='object'&&o[t]==='FormData'&&!m.some(m=>typeof o[m]!='function')}\nappend(...a){x('append',arguments,2);this.#d.push(f(...a))}\ndelete(a){x('delete',arguments,1);a+='';this.#d=this.#d.filter(([b])=>b!==a)}\nget(a){x('get',arguments,1);a+='';for(var b=this.#d,l=b.length,c=0;c<l;c++)if(b[c][0]===a)return b[c][1];return null}\ngetAll(a,b){x('getAll',arguments,1);b=[];a+='';this.#d.forEach(c=>c[0]===a&&b.push(c[1]));return b}\nhas(a){x('has',arguments,1);a+='';return this.#d.some(b=>b[0]===a)}\nforEach(a,b){x('forEach',arguments,1);for(var [c,d]of this)a.call(b,d,c,this)}\nset(...a){x('set',arguments,2);var b=[],c=!0;a=f(...a);this.#d.forEach(d=>{d[0]===a[0]?c&&(c=!b.push(a)):b.push(d)});c&&b.push(a);this.#d=b}\n*entries(){yield*this.#d}\n*keys(){for(var[a]of this)yield a}\n*values(){for(var[,a]of this)yield a}}\n\n/** @param {FormData} F */\nexport function formDataToBlob (F,B=C){\nvar b=`${r()}${r()}`.replace(/\\./g, '').slice(-28).padStart(32, '-'),c=[],p=`--${b}\\r\\nContent-Disposition: form-data; name=\"`\nF.forEach((v,n)=>typeof v=='string'\n?c.push(p+e(n)+`\"\\r\\n\\r\\n${v.replace(/\\r(?!\\n)|(?<!\\r)\\n/g, '\\r\\n')}\\r\\n`)\n:c.push(p+e(n)+`\"; filename=\"${e(v.name, 1)}\"\\r\\nContent-Type: ${v.type||\"application/octet-stream\"}\\r\\n\\r\\n`, v, '\\r\\n'))\nc.push(`--${b}--`)\nreturn new B(c,{type:\"multipart/form-data; boundary=\"+b})}\n"],"names":["uri","test","TypeError","firstComma","replace","indexOf","meta","substring","split","charset","base64","type","typeFull","i","length","encoding","data","unescape","buffer","Buffer","from","FetchBaseError","Error","constructor","message","super","captureStackTrace","this","name","Symbol","toStringTag","FetchError","systemError","code","errno","erroredSysCall","syscall","NAME","isURLSearchParameters","object","append","delete","get","getAll","has","set","sort","isBlob","arrayBuffer","stream","isDomainOrSubdomain","destination","original","orig","URL","hostname","dest","endsWith","isSameProtocol","protocol","pipeline","promisify","INTERNALS","Body","body","size","boundary","toString","isBuffer","types","isAnyArrayBuffer","ArrayBuffer","isView","byteOffset","byteLength","String","disturbed","error","on","error_","url","bodyUsed","consumeBody","slice","formData","ct","headers","startsWith","parameters","URLSearchParams","text","value","toFormData","blob","buf","json","JSON","parse","TextDecoder","decode","async","alloc","accum","accumBytes","chunk","destroy","push","readableEnded","_readableState","ended","every","c","join","concat","prototype","deprecate","Object","defineProperties","enumerable","clone","instance","highWaterMark","p1","p2","getBoundary","PassThrough","pipe","getNonSpecFormDataBoundary","extractContentType","request","writeToStream","end","validateHeaderName","defineProperty","validateHeaderValue","Headers","init","result","raw","values","entries","map","isBoxedPrimitive","method","iterator","pair","toLowerCase","undefined","Proxy","target","p","receiver","call","Set","keys","Reflect","forEach","callback","thisArg","apply","reduce","key","for","property","redirectStatus","isRedirect","Response","options","status","contentType","statusText","counter","ok","redirected","redirect","RangeError","location","response","stringify","stripURLForUseAsAReferrer","originOnly","username","password","hash","pathname","search","ReferrerPolicy","isUrlPotentiallyTrustworthy","hostIp","host","hostIPVersion","isIP","isOriginPotentiallyTrustworthy","isRequest","doBadDataWarn","Request","input","parsedURL","toUpperCase","inputBody","signal","referrer","parsedReferrer","follow","compress","agent","insecureHTTPParser","referrerPolicy","format","validateReferrerPolicy","getNodeRequestOptions","contentLengthValue","totalBytes","getLengthSync","hasKnownLength","getTotalBytes","Number","isNaN","referrerURLCallback","referrerOriginCallback","policy","referrerSource","referrerURL","referrerOrigin","currentURL","origin","determineRequestsReferrer","lastOffset","href","getSearch","path","AbortError","supportedSchemas","fetch","options_","Promise","resolve","reject","send","abort","emit","aborted","abortAndFinalize","finalize","request_","addEventListener","removeEventListener","LAST_CHUNK","previousChunk","isChunkedTransfer","properLastChunkReceived","socket","onSocketClose","errorCallback","onData","compare","prependListener","removeListener","fixResponseChunkedTransferBadEnding","process","version","s","endedWithEventsCount","_eventsCount","hadError","response_","setTimeout","index","array","filter","fromRawHeaders","rawHeaders","statusCode","locationURL","requestOptions","responseReferrerPolicy","policyTokens","token","parseReferrerPolicyFromHeader","once","responseOptions","statusMessage","codings","zlibOptions","flush","finishFlush","catch","stat","blobFromSync","fromBlob","statSync","blobFrom","then","fileFrom","fromFile","fileFromSync","BlobDataItem","lastModified","mtimeMs","start","basename","createReadStream","factory","exports","noop","typeIsObject","x","rethrowAssertionErrorRejection","setFunctionName","fn","configurable","_a","originalPromise","originalPromiseThen","originalPromiseReject","bind","newPromise","executor","promiseResolvedWith","promiseRejectedWith","reason","PerformPromiseThen","promise","onFulfilled","onRejected","uponPromise","uponFulfillment","uponRejection","transformPromiseWith","fulfillmentHandler","rejectionHandler","setPromiseIsHandledToTrue","_queueMicrotask","queueMicrotask","resolvedPromise","cb","reflectCall","F","V","args","Function","promiseCall","SimpleQueue","_cursor","_size","_front","_elements","_next","_back","element","oldBack","newBack","QUEUE_MAX_ARRAY_SIZE","shift","oldFront","newFront","oldCursor","newCursor","elements","node","peek","front","cursor","AbortSteps","ErrorSteps","CancelSteps","PullSteps","ReleaseSteps","ReadableStreamReaderGenericInitialize","reader","_ownerReadableStream","_reader","_state","defaultReaderClosedPromiseInitialize","defaultReaderClosedPromiseResolve","defaultReaderClosedPromiseInitializeAsResolved","defaultReaderClosedPromiseInitializeAsRejected","_storedError","ReadableStreamReaderGenericCancel","ReadableStreamCancel","ReadableStreamReaderGenericRelease","defaultReaderClosedPromiseReject","defaultReaderClosedPromiseResetToRejected","_readableStreamController","readerLockException","_closedPromise","_closedPromise_resolve","_closedPromise_reject","NumberIsFinite","isFinite","MathTrunc","Math","trunc","v","ceil","floor","assertDictionary","obj","context","assertFunction","assertObject","isObject","assertRequiredArgument","position","assertRequiredField","field","convertUnrestrictedDouble","censorNegativeZero","convertUnsignedLongLongWithEnforceRange","upperBound","MAX_SAFE_INTEGER","integerPart","assertReadableStream","IsReadableStream","AcquireReadableStreamDefaultReader","ReadableStreamDefaultReader","ReadableStreamAddReadRequest","readRequest","_readRequests","ReadableStreamFulfillReadRequest","done","_closeSteps","_chunkSteps","ReadableStreamGetNumReadRequests","ReadableStreamHasDefaultReader","IsReadableStreamDefaultReader","IsReadableStreamLocked","closed","defaultReaderBrandCheckException","cancel","read","resolvePromise","rejectPromise","ReadableStreamDefaultReaderRead","_errorSteps","e","releaseLock","ReadableStreamDefaultReaderErrorReadRequests","ReadableStreamDefaultReaderRelease","hasOwnProperty","_disturbed","readRequests","AsyncIteratorPrototype","getPrototypeOf","ReadableStreamAsyncIteratorImpl","preventCancel","_ongoingPromise","_isFinished","_preventCancel","next","nextSteps","_nextSteps","returnSteps","_returnSteps","ReadableStreamAsyncIteratorPrototype","IsReadableStreamAsyncIterator","_asyncIteratorImpl","streamAsyncIteratorBrandCheckException","return","setPrototypeOf","NumberIsNaN","_b","_c","CreateArrayFromList","CopyDataBlockBytes","destOffset","src","srcOffset","n","Uint8Array","TransferArrayBuffer","O","transfer","structuredClone","IsDetachedBuffer","detached","ArrayBufferSlice","begin","GetMethod","prop","func","SymbolAsyncIterator","asyncIterator","GetIterator","hint","syncIteratorRecord","syncIterable","nextMethod","CreateAsyncFromSyncIterator","CloneAsUint8Array","DequeueValue","container","_queue","_queueTotalSize","EnqueueValueWithSize","Infinity","ResetQueue","isDataViewConstructor","ctor","DataView","ReadableStreamBYOBRequest","view","IsReadableStreamBYOBRequest","byobRequestBrandCheckException","_view","respond","bytesWritten","_associatedReadableByteStreamController","ReadableByteStreamControllerRespond","respondWithNewView","ReadableByteStreamControllerRespondWithNewView","ReadableByteStreamController","byobRequest","IsReadableByteStreamController","byteStreamControllerBrandCheckException","ReadableByteStreamControllerGetBYOBRequest","desiredSize","ReadableByteStreamControllerGetDesiredSize","close","_closeRequested","state","_controlledReadableByteStream","ReadableByteStreamControllerClose","enqueue","ReadableByteStreamControllerEnqueue","ReadableByteStreamControllerError","ReadableByteStreamControllerClearPendingPullIntos","_cancelAlgorithm","ReadableByteStreamControllerClearAlgorithms","ReadableByteStreamControllerFillReadRequestFromQueue","autoAllocateChunkSize","_autoAllocateChunkSize","bufferE","pullIntoDescriptor","bufferByteLength","bytesFilled","minimumFill","elementSize","viewConstructor","readerType","_pendingPullIntos","ReadableByteStreamControllerCallPullIfNeeded","firstPullInto","controller","shouldPull","_started","ReadableStreamHasBYOBReader","ReadableStreamGetNumReadIntoRequests","ReadableByteStreamControllerShouldCallPull","_pulling","_pullAgain","_pullAlgorithm","ReadableByteStreamControllerInvalidateBYOBRequest","ReadableByteStreamControllerCommitPullIntoDescriptor","filledView","ReadableByteStreamControllerConvertPullIntoDescriptor","readIntoRequest","_readIntoRequests","ReadableStreamFulfillReadIntoRequest","ReadableByteStreamControllerEnqueueChunkToQueue","ReadableByteStreamControllerEnqueueClonedChunkToQueue","clonedChunk","cloneE","ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue","firstDescriptor","ReadableByteStreamControllerShiftPendingPullInto","ReadableByteStreamControllerFillPullIntoDescriptorFromQueue","maxBytesToCopy","min","maxBytesFilled","totalBytesToCopyRemaining","ready","maxAlignedBytes","queue","headOfQueue","bytesToCopy","destStart","ReadableByteStreamControllerFillHeadPullIntoDescriptor","ReadableByteStreamControllerHandleQueueDrain","ReadableStreamClose","_byobRequest","ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue","ReadableByteStreamControllerRespondInternal","ReadableByteStreamControllerRespondInClosedState","remainderSize","ReadableByteStreamControllerRespondInReadableState","firstPendingPullInto","transferredBuffer","ReadableByteStreamControllerProcessReadRequestsUsingQueue","ReadableStreamError","entry","create","SetUpReadableStreamBYOBRequest","_strategyHWM","viewByteLength","SetUpReadableByteStreamController","startAlgorithm","pullAlgorithm","cancelAlgorithm","r","convertReadableStreamReaderMode","mode","AcquireReadableStreamBYOBReader","ReadableStreamBYOBReader","ReadableStreamAddReadIntoRequest","IsReadableStreamBYOBReader","byobReaderBrandCheckException","rawOptions","convertByobReadOptions","isDataView","ReadableStreamBYOBReaderRead","ReadableStreamBYOBReaderErrorReadIntoRequests","ReadableStreamBYOBReaderRelease","BYTES_PER_ELEMENT","arrayBufferViewElementSize","emptyView","ReadableByteStreamControllerPullInto","readIntoRequests","ExtractHighWaterMark","strategy","defaultHWM","ExtractSizeAlgorithm","convertQueuingStrategy","convertQueuingStrategySize","convertUnderlyingSinkAbortCallback","convertUnderlyingSinkCloseCallback","convertUnderlyingSinkStartCallback","convertUnderlyingSinkWriteCallback","assertWritableStream","IsWritableStream","supportsAbortController","AbortController","WritableStream","rawUnderlyingSink","rawStrategy","underlyingSink","write","convertUnderlyingSink","InitializeWritableStream","sizeAlgorithm","WritableStreamDefaultController","writeAlgorithm","closeAlgorithm","abortAlgorithm","SetUpWritableStreamDefaultController","SetUpWritableStreamDefaultControllerFromUnderlyingSink","locked","streamBrandCheckException$2","IsWritableStreamLocked","WritableStreamAbort","WritableStreamCloseQueuedOrInFlight","WritableStreamClose","getWriter","AcquireWritableStreamDefaultWriter","WritableStreamDefaultWriter","_writer","_writableStreamController","_writeRequests","_inFlightWriteRequest","_closeRequest","_inFlightCloseRequest","_pendingAbortRequest","_backpressure","_abortReason","_abortController","_promise","wasAlreadyErroring","_resolve","_reject","_reason","_wasAlreadyErroring","WritableStreamStartErroring","closeRequest","writer","defaultWriterReadyPromiseResolve","closeSentinel","WritableStreamDefaultControllerAdvanceQueueIfNeeded","WritableStreamDealWithRejection","WritableStreamFinishErroring","WritableStreamDefaultWriterEnsureReadyPromiseRejected","WritableStreamHasOperationMarkedInFlight","storedError","writeRequest","WritableStreamRejectCloseAndClosedPromiseIfNeeded","abortRequest","defaultWriterClosedPromiseReject","WritableStreamUpdateBackpressure","backpressure","defaultWriterReadyPromiseInitialize","defaultWriterReadyPromiseReset","_ownerWritableStream","defaultWriterReadyPromiseInitializeAsResolved","defaultWriterClosedPromiseInitialize","defaultWriterReadyPromiseInitializeAsRejected","defaultWriterClosedPromiseResolve","defaultWriterClosedPromiseInitializeAsRejected","IsWritableStreamDefaultWriter","defaultWriterBrandCheckException","defaultWriterLockException","WritableStreamDefaultControllerGetDesiredSize","WritableStreamDefaultWriterGetDesiredSize","_readyPromise","WritableStreamDefaultWriterAbort","WritableStreamDefaultWriterClose","WritableStreamDefaultWriterRelease","WritableStreamDefaultWriterWrite","_readyPromiseState","defaultWriterReadyPromiseReject","defaultWriterReadyPromiseResetToRejected","releasedError","_closedPromiseState","defaultWriterClosedPromiseResetToRejected","WritableStreamDefaultWriterEnsureClosedPromiseRejected","chunkSize","_strategySizeAlgorithm","chunkSizeE","WritableStreamDefaultControllerErrorIfNeeded","WritableStreamDefaultControllerGetChunkSize","WritableStreamAddWriteRequest","enqueueE","_controlledWritableStream","WritableStreamDefaultControllerGetBackpressure","WritableStreamDefaultControllerWrite","abortReason","IsWritableStreamDefaultController","defaultControllerBrandCheckException$2","WritableStreamDefaultControllerError","_abortAlgorithm","WritableStreamDefaultControllerClearAlgorithms","createAbortController","_writeAlgorithm","_closeAlgorithm","WritableStreamMarkCloseRequestInFlight","sinkClosePromise","WritableStreamFinishInFlightClose","WritableStreamFinishInFlightCloseWithError","WritableStreamDefaultControllerProcessClose","WritableStreamMarkFirstWriteRequestInFlight","WritableStreamFinishInFlightWrite","WritableStreamFinishInFlightWriteWithError","WritableStreamDefaultControllerProcessWrite","_readyPromise_resolve","_readyPromise_reject","globals","globalThis","self","global","DOMException","isDOMExceptionConstructor","getFromGlobal","writable","createPolyfill","ReadableStreamPipeTo","source","preventClose","preventAbort","shuttingDown","currentWrite","actions","shutdownWithAction","all","action","isOrBecomesErrored","shutdown","WritableStreamDefaultWriterCloseWithErrorPropagation","destClosed","waitForWritesToFinish","oldCurrentWrite","originalIsError","originalError","doTheRest","newError","isError","resolveLoop","rejectLoop","resolveRead","rejectRead","ReadableStreamDefaultController","IsReadableStreamDefaultController","defaultControllerBrandCheckException$1","ReadableStreamDefaultControllerGetDesiredSize","ReadableStreamDefaultControllerCanCloseOrEnqueue","ReadableStreamDefaultControllerClose","ReadableStreamDefaultControllerEnqueue","ReadableStreamDefaultControllerError","ReadableStreamDefaultControllerClearAlgorithms","_controlledReadableStream","ReadableStreamDefaultControllerCallPullIfNeeded","ReadableStreamDefaultControllerShouldCallPull","SetUpReadableStreamDefaultController","ReadableStreamFrom","getReader","CreateReadableStream","readPromise","readResult","ReadableStreamFromDefaultReader","asyncIterable","iteratorRecord","nextResult","IteratorNext","iterResult","Boolean","IteratorComplete","IteratorValue","returnMethod","returnResult","ReadableStreamFromIterable","convertUnderlyingSourceCancelCallback","convertUnderlyingSourcePullCallback","convertUnderlyingSourceStartCallback","convertReadableStreamType","convertPipeOptions","isAbortSignal","assertAbortSignal","ReadableStream","rawUnderlyingSource","underlyingSource","pull","convertUnderlyingDefaultOrByteSource","InitializeReadableStream","underlyingByteSource","SetUpReadableByteStreamControllerFromUnderlyingSource","SetUpReadableStreamDefaultControllerFromUnderlyingSource","streamBrandCheckException$1","convertReaderOptions","pipeThrough","rawTransform","transform","readable","convertReadableWritablePair","pipeTo","tee","reason1","reason2","branch1","branch2","resolveCancelPromise","reading","readAgainForBranch1","readAgainForBranch2","canceled1","canceled2","cancelPromise","forwardReaderError","thisReader","pullWithDefaultReader","chunk1","chunk2","pull1Algorithm","pull2Algorithm","pullWithBYOBReader","forBranch2","byobBranch","otherBranch","byobCanceled","otherCanceled","CreateReadableByteStream","compositeReason","cancelResult","ReadableByteStreamTee","readAgain","ReadableStreamDefaultTee","impl","AcquireReadableStreamAsyncIterator","convertIteratorOptions","convertQueuingStrategyInit","byteLengthSizeFunction","ByteLengthQueuingStrategy","_byteLengthQueuingStrategyHighWaterMark","IsByteLengthQueuingStrategy","byteLengthBrandCheckException","countSizeFunction","CountQueuingStrategy","_countQueuingStrategyHighWaterMark","IsCountQueuingStrategy","countBrandCheckException","convertTransformerFlushCallback","convertTransformerStartCallback","convertTransformerTransformCallback","convertTransformerCancelCallback","TransformStream","rawTransformer","rawWritableStrategy","rawReadableStrategy","writableStrategy","readableStrategy","transformer","readableType","writableType","convertTransformer","readableHighWaterMark","readableSizeAlgorithm","writableHighWaterMark","writableSizeAlgorithm","startPromise_resolve","startPromise","_writable","CreateWritableStream","_transformStreamController","_backpressureChangePromise","TransformStreamDefaultControllerPerformTransform","TransformStreamDefaultSinkWriteAlgorithm","_finishPromise","_readable","_finishPromise_resolve","_finishPromise_reject","flushPromise","_flushAlgorithm","TransformStreamDefaultControllerClearAlgorithms","defaultControllerFinishPromiseReject","defaultControllerFinishPromiseResolve","TransformStreamDefaultSinkCloseAlgorithm","TransformStreamDefaultSinkAbortAlgorithm","TransformStreamSetBackpressure","TransformStreamDefaultSourcePullAlgorithm","TransformStreamUnblockWrite","TransformStreamDefaultSourceCancelAlgorithm","_backpressureChangePromise_resolve","InitializeTransformStream","TransformStreamDefaultController","transformAlgorithm","flushAlgorithm","TransformStreamDefaultControllerEnqueue","transformResultE","_controlledTransformStream","_transformAlgorithm","SetUpTransformStreamDefaultController","SetUpTransformStreamDefaultControllerFromTransformer","IsTransformStream","streamBrandCheckException","TransformStreamError","TransformStreamErrorWritableAndUnblockWrite","IsTransformStreamDefaultController","defaultControllerBrandCheckException","terminate","TransformStreamDefaultControllerTerminate","readableController","ReadableStreamDefaultControllerHasBackpressure","MessageChannel","port","port1","ab","postMessage","err","module","fileBits","fileName","arguments","Date","now","hasInstance","toIterator","parts","part","b","_Blob","Blob","blobParts","encoder","TextEncoder","encode","endings","decoder","str","offset","it","ctrl","relativeStart","max","relativeEnd","span","added","subarray","emitWarning","assign","params","t","h","random","m","f","a","FormData","o","some","l","d","formDataToBlob","B","padStart"],"sourceRoot":""}